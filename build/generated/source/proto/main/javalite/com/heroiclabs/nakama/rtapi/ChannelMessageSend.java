// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * Send a message to a realtime channel.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.ChannelMessageSend}
 */
public  final class ChannelMessageSend extends
    com.google.protobuf.GeneratedMessageLite<
        ChannelMessageSend, ChannelMessageSend.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.ChannelMessageSend)
    ChannelMessageSendOrBuilder {
  private ChannelMessageSend() {
    channelId_ = "";
    content_ = "";
  }
  public static final int CHANNEL_ID_FIELD_NUMBER = 1;
  private java.lang.String channelId_;
  /**
   * <pre>
   * The channel to sent to.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  public java.lang.String getChannelId() {
    return channelId_;
  }
  /**
   * <pre>
   * The channel to sent to.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getChannelIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(channelId_);
  }
  /**
   * <pre>
   * The channel to sent to.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  private void setChannelId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    channelId_ = value;
  }
  /**
   * <pre>
   * The channel to sent to.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  private void clearChannelId() {
    
    channelId_ = getDefaultInstance().getChannelId();
  }
  /**
   * <pre>
   * The channel to sent to.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  private void setChannelIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    channelId_ = value.toStringUtf8();
  }

  public static final int CONTENT_FIELD_NUMBER = 2;
  private java.lang.String content_;
  /**
   * <pre>
   * Message content.
   * </pre>
   *
   * <code>optional string content = 2;</code>
   */
  public java.lang.String getContent() {
    return content_;
  }
  /**
   * <pre>
   * Message content.
   * </pre>
   *
   * <code>optional string content = 2;</code>
   */
  public com.google.protobuf.ByteString
      getContentBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(content_);
  }
  /**
   * <pre>
   * Message content.
   * </pre>
   *
   * <code>optional string content = 2;</code>
   */
  private void setContent(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    content_ = value;
  }
  /**
   * <pre>
   * Message content.
   * </pre>
   *
   * <code>optional string content = 2;</code>
   */
  private void clearContent() {
    
    content_ = getDefaultInstance().getContent();
  }
  /**
   * <pre>
   * Message content.
   * </pre>
   *
   * <code>optional string content = 2;</code>
   */
  private void setContentBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    content_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!channelId_.isEmpty()) {
      output.writeString(1, getChannelId());
    }
    if (!content_.isEmpty()) {
      output.writeString(2, getContent());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!channelId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getChannelId());
    }
    if (!content_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getContent());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.ChannelMessageSend prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Send a message to a realtime channel.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.ChannelMessageSend}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.ChannelMessageSend, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.ChannelMessageSend)
      com.heroiclabs.nakama.rtapi.ChannelMessageSendOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.ChannelMessageSend.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The channel to sent to.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public java.lang.String getChannelId() {
      return instance.getChannelId();
    }
    /**
     * <pre>
     * The channel to sent to.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getChannelIdBytes() {
      return instance.getChannelIdBytes();
    }
    /**
     * <pre>
     * The channel to sent to.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public Builder setChannelId(
        java.lang.String value) {
      copyOnWrite();
      instance.setChannelId(value);
      return this;
    }
    /**
     * <pre>
     * The channel to sent to.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public Builder clearChannelId() {
      copyOnWrite();
      instance.clearChannelId();
      return this;
    }
    /**
     * <pre>
     * The channel to sent to.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public Builder setChannelIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setChannelIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Message content.
     * </pre>
     *
     * <code>optional string content = 2;</code>
     */
    public java.lang.String getContent() {
      return instance.getContent();
    }
    /**
     * <pre>
     * Message content.
     * </pre>
     *
     * <code>optional string content = 2;</code>
     */
    public com.google.protobuf.ByteString
        getContentBytes() {
      return instance.getContentBytes();
    }
    /**
     * <pre>
     * Message content.
     * </pre>
     *
     * <code>optional string content = 2;</code>
     */
    public Builder setContent(
        java.lang.String value) {
      copyOnWrite();
      instance.setContent(value);
      return this;
    }
    /**
     * <pre>
     * Message content.
     * </pre>
     *
     * <code>optional string content = 2;</code>
     */
    public Builder clearContent() {
      copyOnWrite();
      instance.clearContent();
      return this;
    }
    /**
     * <pre>
     * Message content.
     * </pre>
     *
     * <code>optional string content = 2;</code>
     */
    public Builder setContentBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setContentBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.ChannelMessageSend)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.ChannelMessageSend();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.ChannelMessageSend other = (com.heroiclabs.nakama.rtapi.ChannelMessageSend) arg1;
        channelId_ = visitor.visitString(!channelId_.isEmpty(), channelId_,
            !other.channelId_.isEmpty(), other.channelId_);
        content_ = visitor.visitString(!content_.isEmpty(), content_,
            !other.content_.isEmpty(), other.content_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                channelId_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                content_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.ChannelMessageSend.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.ChannelMessageSend)
  private static final com.heroiclabs.nakama.rtapi.ChannelMessageSend DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ChannelMessageSend();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.ChannelMessageSend getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ChannelMessageSend> PARSER;

  public static com.google.protobuf.Parser<ChannelMessageSend> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

