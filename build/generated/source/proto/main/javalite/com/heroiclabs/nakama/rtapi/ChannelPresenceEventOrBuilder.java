// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

public interface ChannelPresenceEventOrBuilder extends
    // @@protoc_insertion_point(interface_extends:nakama.realtime.ChannelPresenceEvent)
    com.google.protobuf.MessageLiteOrBuilder {

  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  java.lang.String getChannelId();
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  com.google.protobuf.ByteString
      getChannelIdBytes();

  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> 
      getJoinsList();
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  com.heroiclabs.nakama.rtapi.UserPresence getJoins(int index);
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  int getJoinsCount();

  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> 
      getLeavesList();
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  com.heroiclabs.nakama.rtapi.UserPresence getLeaves(int index);
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  int getLeavesCount();

  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  java.lang.String getRoomName();
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  com.google.protobuf.ByteString
      getRoomNameBytes();

  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  java.lang.String getGroupId();
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  com.google.protobuf.ByteString
      getGroupIdBytes();

  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  java.lang.String getUserIdOne();
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  com.google.protobuf.ByteString
      getUserIdOneBytes();

  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  java.lang.String getUserIdTwo();
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  com.google.protobuf.ByteString
      getUserIdTwoBytes();
}
