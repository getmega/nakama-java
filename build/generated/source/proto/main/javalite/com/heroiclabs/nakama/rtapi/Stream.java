// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * Represents identifying information for a stream.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.Stream}
 */
public  final class Stream extends
    com.google.protobuf.GeneratedMessageLite<
        Stream, Stream.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.Stream)
    StreamOrBuilder {
  private Stream() {
    subject_ = "";
    subcontext_ = "";
    label_ = "";
  }
  public static final int MODE_FIELD_NUMBER = 1;
  private int mode_;
  /**
   * <pre>
   * Mode identifies the type of stream.
   * </pre>
   *
   * <code>optional int32 mode = 1;</code>
   */
  public int getMode() {
    return mode_;
  }
  /**
   * <pre>
   * Mode identifies the type of stream.
   * </pre>
   *
   * <code>optional int32 mode = 1;</code>
   */
  private void setMode(int value) {
    
    mode_ = value;
  }
  /**
   * <pre>
   * Mode identifies the type of stream.
   * </pre>
   *
   * <code>optional int32 mode = 1;</code>
   */
  private void clearMode() {
    
    mode_ = 0;
  }

  public static final int SUBJECT_FIELD_NUMBER = 2;
  private java.lang.String subject_;
  /**
   * <pre>
   * Subject is the primary identifier, if any.
   * </pre>
   *
   * <code>optional string subject = 2;</code>
   */
  public java.lang.String getSubject() {
    return subject_;
  }
  /**
   * <pre>
   * Subject is the primary identifier, if any.
   * </pre>
   *
   * <code>optional string subject = 2;</code>
   */
  public com.google.protobuf.ByteString
      getSubjectBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(subject_);
  }
  /**
   * <pre>
   * Subject is the primary identifier, if any.
   * </pre>
   *
   * <code>optional string subject = 2;</code>
   */
  private void setSubject(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    subject_ = value;
  }
  /**
   * <pre>
   * Subject is the primary identifier, if any.
   * </pre>
   *
   * <code>optional string subject = 2;</code>
   */
  private void clearSubject() {
    
    subject_ = getDefaultInstance().getSubject();
  }
  /**
   * <pre>
   * Subject is the primary identifier, if any.
   * </pre>
   *
   * <code>optional string subject = 2;</code>
   */
  private void setSubjectBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    subject_ = value.toStringUtf8();
  }

  public static final int SUBCONTEXT_FIELD_NUMBER = 3;
  private java.lang.String subcontext_;
  /**
   * <pre>
   * Subcontext is a secondary identifier, if any.
   * </pre>
   *
   * <code>optional string subcontext = 3;</code>
   */
  public java.lang.String getSubcontext() {
    return subcontext_;
  }
  /**
   * <pre>
   * Subcontext is a secondary identifier, if any.
   * </pre>
   *
   * <code>optional string subcontext = 3;</code>
   */
  public com.google.protobuf.ByteString
      getSubcontextBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(subcontext_);
  }
  /**
   * <pre>
   * Subcontext is a secondary identifier, if any.
   * </pre>
   *
   * <code>optional string subcontext = 3;</code>
   */
  private void setSubcontext(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    subcontext_ = value;
  }
  /**
   * <pre>
   * Subcontext is a secondary identifier, if any.
   * </pre>
   *
   * <code>optional string subcontext = 3;</code>
   */
  private void clearSubcontext() {
    
    subcontext_ = getDefaultInstance().getSubcontext();
  }
  /**
   * <pre>
   * Subcontext is a secondary identifier, if any.
   * </pre>
   *
   * <code>optional string subcontext = 3;</code>
   */
  private void setSubcontextBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    subcontext_ = value.toStringUtf8();
  }

  public static final int LABEL_FIELD_NUMBER = 4;
  private java.lang.String label_;
  /**
   * <pre>
   * The label is an arbitrary identifying string, if the stream has one.
   * </pre>
   *
   * <code>optional string label = 4;</code>
   */
  public java.lang.String getLabel() {
    return label_;
  }
  /**
   * <pre>
   * The label is an arbitrary identifying string, if the stream has one.
   * </pre>
   *
   * <code>optional string label = 4;</code>
   */
  public com.google.protobuf.ByteString
      getLabelBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(label_);
  }
  /**
   * <pre>
   * The label is an arbitrary identifying string, if the stream has one.
   * </pre>
   *
   * <code>optional string label = 4;</code>
   */
  private void setLabel(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    label_ = value;
  }
  /**
   * <pre>
   * The label is an arbitrary identifying string, if the stream has one.
   * </pre>
   *
   * <code>optional string label = 4;</code>
   */
  private void clearLabel() {
    
    label_ = getDefaultInstance().getLabel();
  }
  /**
   * <pre>
   * The label is an arbitrary identifying string, if the stream has one.
   * </pre>
   *
   * <code>optional string label = 4;</code>
   */
  private void setLabelBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    label_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (mode_ != 0) {
      output.writeInt32(1, mode_);
    }
    if (!subject_.isEmpty()) {
      output.writeString(2, getSubject());
    }
    if (!subcontext_.isEmpty()) {
      output.writeString(3, getSubcontext());
    }
    if (!label_.isEmpty()) {
      output.writeString(4, getLabel());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (mode_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, mode_);
    }
    if (!subject_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getSubject());
    }
    if (!subcontext_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getSubcontext());
    }
    if (!label_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getLabel());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.Stream parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.Stream prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Represents identifying information for a stream.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.Stream}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.Stream, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.Stream)
      com.heroiclabs.nakama.rtapi.StreamOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.Stream.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Mode identifies the type of stream.
     * </pre>
     *
     * <code>optional int32 mode = 1;</code>
     */
    public int getMode() {
      return instance.getMode();
    }
    /**
     * <pre>
     * Mode identifies the type of stream.
     * </pre>
     *
     * <code>optional int32 mode = 1;</code>
     */
    public Builder setMode(int value) {
      copyOnWrite();
      instance.setMode(value);
      return this;
    }
    /**
     * <pre>
     * Mode identifies the type of stream.
     * </pre>
     *
     * <code>optional int32 mode = 1;</code>
     */
    public Builder clearMode() {
      copyOnWrite();
      instance.clearMode();
      return this;
    }

    /**
     * <pre>
     * Subject is the primary identifier, if any.
     * </pre>
     *
     * <code>optional string subject = 2;</code>
     */
    public java.lang.String getSubject() {
      return instance.getSubject();
    }
    /**
     * <pre>
     * Subject is the primary identifier, if any.
     * </pre>
     *
     * <code>optional string subject = 2;</code>
     */
    public com.google.protobuf.ByteString
        getSubjectBytes() {
      return instance.getSubjectBytes();
    }
    /**
     * <pre>
     * Subject is the primary identifier, if any.
     * </pre>
     *
     * <code>optional string subject = 2;</code>
     */
    public Builder setSubject(
        java.lang.String value) {
      copyOnWrite();
      instance.setSubject(value);
      return this;
    }
    /**
     * <pre>
     * Subject is the primary identifier, if any.
     * </pre>
     *
     * <code>optional string subject = 2;</code>
     */
    public Builder clearSubject() {
      copyOnWrite();
      instance.clearSubject();
      return this;
    }
    /**
     * <pre>
     * Subject is the primary identifier, if any.
     * </pre>
     *
     * <code>optional string subject = 2;</code>
     */
    public Builder setSubjectBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSubjectBytes(value);
      return this;
    }

    /**
     * <pre>
     * Subcontext is a secondary identifier, if any.
     * </pre>
     *
     * <code>optional string subcontext = 3;</code>
     */
    public java.lang.String getSubcontext() {
      return instance.getSubcontext();
    }
    /**
     * <pre>
     * Subcontext is a secondary identifier, if any.
     * </pre>
     *
     * <code>optional string subcontext = 3;</code>
     */
    public com.google.protobuf.ByteString
        getSubcontextBytes() {
      return instance.getSubcontextBytes();
    }
    /**
     * <pre>
     * Subcontext is a secondary identifier, if any.
     * </pre>
     *
     * <code>optional string subcontext = 3;</code>
     */
    public Builder setSubcontext(
        java.lang.String value) {
      copyOnWrite();
      instance.setSubcontext(value);
      return this;
    }
    /**
     * <pre>
     * Subcontext is a secondary identifier, if any.
     * </pre>
     *
     * <code>optional string subcontext = 3;</code>
     */
    public Builder clearSubcontext() {
      copyOnWrite();
      instance.clearSubcontext();
      return this;
    }
    /**
     * <pre>
     * Subcontext is a secondary identifier, if any.
     * </pre>
     *
     * <code>optional string subcontext = 3;</code>
     */
    public Builder setSubcontextBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setSubcontextBytes(value);
      return this;
    }

    /**
     * <pre>
     * The label is an arbitrary identifying string, if the stream has one.
     * </pre>
     *
     * <code>optional string label = 4;</code>
     */
    public java.lang.String getLabel() {
      return instance.getLabel();
    }
    /**
     * <pre>
     * The label is an arbitrary identifying string, if the stream has one.
     * </pre>
     *
     * <code>optional string label = 4;</code>
     */
    public com.google.protobuf.ByteString
        getLabelBytes() {
      return instance.getLabelBytes();
    }
    /**
     * <pre>
     * The label is an arbitrary identifying string, if the stream has one.
     * </pre>
     *
     * <code>optional string label = 4;</code>
     */
    public Builder setLabel(
        java.lang.String value) {
      copyOnWrite();
      instance.setLabel(value);
      return this;
    }
    /**
     * <pre>
     * The label is an arbitrary identifying string, if the stream has one.
     * </pre>
     *
     * <code>optional string label = 4;</code>
     */
    public Builder clearLabel() {
      copyOnWrite();
      instance.clearLabel();
      return this;
    }
    /**
     * <pre>
     * The label is an arbitrary identifying string, if the stream has one.
     * </pre>
     *
     * <code>optional string label = 4;</code>
     */
    public Builder setLabelBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setLabelBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.Stream)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.Stream();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.Stream other = (com.heroiclabs.nakama.rtapi.Stream) arg1;
        mode_ = visitor.visitInt(mode_ != 0, mode_,
            other.mode_ != 0, other.mode_);
        subject_ = visitor.visitString(!subject_.isEmpty(), subject_,
            !other.subject_.isEmpty(), other.subject_);
        subcontext_ = visitor.visitString(!subcontext_.isEmpty(), subcontext_,
            !other.subcontext_.isEmpty(), other.subcontext_);
        label_ = visitor.visitString(!label_.isEmpty(), label_,
            !other.label_.isEmpty(), other.label_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                mode_ = input.readInt32();
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();

                subject_ = s;
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                subcontext_ = s;
                break;
              }
              case 34: {
                String s = input.readStringRequireUtf8();

                label_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.Stream.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.Stream)
  private static final com.heroiclabs.nakama.rtapi.Stream DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Stream();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.Stream getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Stream> PARSER;

  public static com.google.protobuf.Parser<Stream> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

