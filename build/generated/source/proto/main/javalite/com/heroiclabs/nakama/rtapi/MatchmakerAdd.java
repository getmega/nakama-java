// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * Start a new matchmaking process.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.MatchmakerAdd}
 */
public  final class MatchmakerAdd extends
    com.google.protobuf.GeneratedMessageLite<
        MatchmakerAdd, MatchmakerAdd.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.MatchmakerAdd)
    MatchmakerAddOrBuilder {
  private MatchmakerAdd() {
    query_ = "";
  }
  private int bitField0_;
  public static final int MIN_COUNT_FIELD_NUMBER = 1;
  private int minCount_;
  /**
   * <pre>
   * Minimum total user count to match together.
   * </pre>
   *
   * <code>optional int32 min_count = 1;</code>
   */
  public int getMinCount() {
    return minCount_;
  }
  /**
   * <pre>
   * Minimum total user count to match together.
   * </pre>
   *
   * <code>optional int32 min_count = 1;</code>
   */
  private void setMinCount(int value) {
    
    minCount_ = value;
  }
  /**
   * <pre>
   * Minimum total user count to match together.
   * </pre>
   *
   * <code>optional int32 min_count = 1;</code>
   */
  private void clearMinCount() {
    
    minCount_ = 0;
  }

  public static final int MAX_COUNT_FIELD_NUMBER = 2;
  private int maxCount_;
  /**
   * <pre>
   * Maximum total user count to match together.
   * </pre>
   *
   * <code>optional int32 max_count = 2;</code>
   */
  public int getMaxCount() {
    return maxCount_;
  }
  /**
   * <pre>
   * Maximum total user count to match together.
   * </pre>
   *
   * <code>optional int32 max_count = 2;</code>
   */
  private void setMaxCount(int value) {
    
    maxCount_ = value;
  }
  /**
   * <pre>
   * Maximum total user count to match together.
   * </pre>
   *
   * <code>optional int32 max_count = 2;</code>
   */
  private void clearMaxCount() {
    
    maxCount_ = 0;
  }

  public static final int QUERY_FIELD_NUMBER = 3;
  private java.lang.String query_;
  /**
   * <pre>
   * Filter query used to identify suitable users.
   * </pre>
   *
   * <code>optional string query = 3;</code>
   */
  public java.lang.String getQuery() {
    return query_;
  }
  /**
   * <pre>
   * Filter query used to identify suitable users.
   * </pre>
   *
   * <code>optional string query = 3;</code>
   */
  public com.google.protobuf.ByteString
      getQueryBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(query_);
  }
  /**
   * <pre>
   * Filter query used to identify suitable users.
   * </pre>
   *
   * <code>optional string query = 3;</code>
   */
  private void setQuery(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    query_ = value;
  }
  /**
   * <pre>
   * Filter query used to identify suitable users.
   * </pre>
   *
   * <code>optional string query = 3;</code>
   */
  private void clearQuery() {
    
    query_ = getDefaultInstance().getQuery();
  }
  /**
   * <pre>
   * Filter query used to identify suitable users.
   * </pre>
   *
   * <code>optional string query = 3;</code>
   */
  private void setQueryBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    query_ = value.toStringUtf8();
  }

  public static final int STRING_PROPERTIES_FIELD_NUMBER = 4;
  private static final class StringPropertiesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, java.lang.String> stringProperties_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetStringProperties() {
    return stringProperties_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetMutableStringProperties() {
    if (!stringProperties_.isMutable()) {
      stringProperties_ = stringProperties_.mutableCopy();
    }
    return stringProperties_;
  }

  public int getStringPropertiesCount() {
    return internalGetStringProperties().size();
  }
  /**
   * <pre>
   * String properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; string_properties = 4;</code>
   */

  public boolean containsStringProperties(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetStringProperties().containsKey(key);
  }
  /**
   * Use {@link #getStringPropertiesMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getStringProperties() {
    return getStringPropertiesMap();
  }
  /**
   * <pre>
   * String properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; string_properties = 4;</code>
   */

  public java.util.Map<java.lang.String, java.lang.String> getStringPropertiesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetStringProperties());
  }
  /**
   * <pre>
   * String properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; string_properties = 4;</code>
   */

  public java.lang.String getStringPropertiesOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetStringProperties();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * String properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; string_properties = 4;</code>
   */

  public java.lang.String getStringPropertiesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetStringProperties();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * String properties.
   * </pre>
   *
   * <code>map&lt;string, string&gt; string_properties = 4;</code>
   */
  private java.util.Map<java.lang.String, java.lang.String>
  getMutableStringPropertiesMap() {
    return internalGetMutableStringProperties();
  }

  public static final int NUMERIC_PROPERTIES_FIELD_NUMBER = 5;
  private static final class NumericPropertiesDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, java.lang.Double> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, java.lang.Double>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.DOUBLE,
                0D);
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, java.lang.Double> numericProperties_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Double>
  internalGetNumericProperties() {
    return numericProperties_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Double>
  internalGetMutableNumericProperties() {
    if (!numericProperties_.isMutable()) {
      numericProperties_ = numericProperties_.mutableCopy();
    }
    return numericProperties_;
  }

  public int getNumericPropertiesCount() {
    return internalGetNumericProperties().size();
  }
  /**
   * <pre>
   * Numeric properties.
   * </pre>
   *
   * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
   */

  public boolean containsNumericProperties(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetNumericProperties().containsKey(key);
  }
  /**
   * Use {@link #getNumericPropertiesMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.Double> getNumericProperties() {
    return getNumericPropertiesMap();
  }
  /**
   * <pre>
   * Numeric properties.
   * </pre>
   *
   * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
   */

  public java.util.Map<java.lang.String, java.lang.Double> getNumericPropertiesMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetNumericProperties());
  }
  /**
   * <pre>
   * Numeric properties.
   * </pre>
   *
   * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
   */

  public double getNumericPropertiesOrDefault(
      java.lang.String key,
      double defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Double> map =
        internalGetNumericProperties();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Numeric properties.
   * </pre>
   *
   * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
   */

  public double getNumericPropertiesOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.Double> map =
        internalGetNumericProperties();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * Numeric properties.
   * </pre>
   *
   * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
   */
  private java.util.Map<java.lang.String, java.lang.Double>
  getMutableNumericPropertiesMap() {
    return internalGetMutableNumericProperties();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (minCount_ != 0) {
      output.writeInt32(1, minCount_);
    }
    if (maxCount_ != 0) {
      output.writeInt32(2, maxCount_);
    }
    if (!query_.isEmpty()) {
      output.writeString(3, getQuery());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetStringProperties().entrySet()) {
      StringPropertiesDefaultEntryHolder.defaultEntry.serializeTo(
          output, 4, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
         : internalGetNumericProperties().entrySet()) {
      NumericPropertiesDefaultEntryHolder.defaultEntry.serializeTo(
          output, 5, entry.getKey(), entry.getValue());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (minCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(1, minCount_);
    }
    if (maxCount_ != 0) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(2, maxCount_);
    }
    if (!query_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getQuery());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetStringProperties().entrySet()) {
      size += StringPropertiesDefaultEntryHolder.defaultEntry.computeMessageSize(
        4, entry.getKey(), entry.getValue());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
         : internalGetNumericProperties().entrySet()) {
      size += NumericPropertiesDefaultEntryHolder.defaultEntry.computeMessageSize(
        5, entry.getKey(), entry.getValue());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.MatchmakerAdd prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Start a new matchmaking process.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.MatchmakerAdd}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.MatchmakerAdd, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.MatchmakerAdd)
      com.heroiclabs.nakama.rtapi.MatchmakerAddOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.MatchmakerAdd.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * Minimum total user count to match together.
     * </pre>
     *
     * <code>optional int32 min_count = 1;</code>
     */
    public int getMinCount() {
      return instance.getMinCount();
    }
    /**
     * <pre>
     * Minimum total user count to match together.
     * </pre>
     *
     * <code>optional int32 min_count = 1;</code>
     */
    public Builder setMinCount(int value) {
      copyOnWrite();
      instance.setMinCount(value);
      return this;
    }
    /**
     * <pre>
     * Minimum total user count to match together.
     * </pre>
     *
     * <code>optional int32 min_count = 1;</code>
     */
    public Builder clearMinCount() {
      copyOnWrite();
      instance.clearMinCount();
      return this;
    }

    /**
     * <pre>
     * Maximum total user count to match together.
     * </pre>
     *
     * <code>optional int32 max_count = 2;</code>
     */
    public int getMaxCount() {
      return instance.getMaxCount();
    }
    /**
     * <pre>
     * Maximum total user count to match together.
     * </pre>
     *
     * <code>optional int32 max_count = 2;</code>
     */
    public Builder setMaxCount(int value) {
      copyOnWrite();
      instance.setMaxCount(value);
      return this;
    }
    /**
     * <pre>
     * Maximum total user count to match together.
     * </pre>
     *
     * <code>optional int32 max_count = 2;</code>
     */
    public Builder clearMaxCount() {
      copyOnWrite();
      instance.clearMaxCount();
      return this;
    }

    /**
     * <pre>
     * Filter query used to identify suitable users.
     * </pre>
     *
     * <code>optional string query = 3;</code>
     */
    public java.lang.String getQuery() {
      return instance.getQuery();
    }
    /**
     * <pre>
     * Filter query used to identify suitable users.
     * </pre>
     *
     * <code>optional string query = 3;</code>
     */
    public com.google.protobuf.ByteString
        getQueryBytes() {
      return instance.getQueryBytes();
    }
    /**
     * <pre>
     * Filter query used to identify suitable users.
     * </pre>
     *
     * <code>optional string query = 3;</code>
     */
    public Builder setQuery(
        java.lang.String value) {
      copyOnWrite();
      instance.setQuery(value);
      return this;
    }
    /**
     * <pre>
     * Filter query used to identify suitable users.
     * </pre>
     *
     * <code>optional string query = 3;</code>
     */
    public Builder clearQuery() {
      copyOnWrite();
      instance.clearQuery();
      return this;
    }
    /**
     * <pre>
     * Filter query used to identify suitable users.
     * </pre>
     *
     * <code>optional string query = 3;</code>
     */
    public Builder setQueryBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setQueryBytes(value);
      return this;
    }


    public int getStringPropertiesCount() {
      return instance.getStringPropertiesMap().size();
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */

    public boolean containsStringProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return instance.getStringPropertiesMap().containsKey(key);
    }

    public Builder clearStringProperties() {
      copyOnWrite();
      instance.getMutableStringPropertiesMap().clear();
      return this;
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */

    public Builder removeStringProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      copyOnWrite();
      instance.getMutableStringPropertiesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getStringPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getStringProperties() {
      return getStringPropertiesMap();
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */
    public java.util.Map<java.lang.String, java.lang.String> getStringPropertiesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getStringPropertiesMap());
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */

    public java.lang.String getStringPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getStringPropertiesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */

    public java.lang.String getStringPropertiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getStringPropertiesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */
    public Builder putStringProperties(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      copyOnWrite();
      instance.getMutableStringPropertiesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 4;</code>
     */
    public Builder putAllStringProperties(
        java.util.Map<java.lang.String, java.lang.String> values) {
      copyOnWrite();
      instance.getMutableStringPropertiesMap().putAll(values);
      return this;
    }


    public int getNumericPropertiesCount() {
      return instance.getNumericPropertiesMap().size();
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */

    public boolean containsNumericProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return instance.getNumericPropertiesMap().containsKey(key);
    }

    public Builder clearNumericProperties() {
      copyOnWrite();
      instance.getMutableNumericPropertiesMap().clear();
      return this;
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */

    public Builder removeNumericProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      copyOnWrite();
      instance.getMutableNumericPropertiesMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getNumericPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getNumericProperties() {
      return getNumericPropertiesMap();
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */
    public java.util.Map<java.lang.String, java.lang.Double> getNumericPropertiesMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getNumericPropertiesMap());
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */

    public double getNumericPropertiesOrDefault(
        java.lang.String key,
        double defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          instance.getNumericPropertiesMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */

    public double getNumericPropertiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          instance.getNumericPropertiesMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */
    public Builder putNumericProperties(
        java.lang.String key,
        double value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      
      copyOnWrite();
      instance.getMutableNumericPropertiesMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 5;</code>
     */
    public Builder putAllNumericProperties(
        java.util.Map<java.lang.String, java.lang.Double> values) {
      copyOnWrite();
      instance.getMutableNumericPropertiesMap().putAll(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.MatchmakerAdd)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.MatchmakerAdd();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        stringProperties_.makeImmutable();
        numericProperties_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.MatchmakerAdd other = (com.heroiclabs.nakama.rtapi.MatchmakerAdd) arg1;
        minCount_ = visitor.visitInt(minCount_ != 0, minCount_,
            other.minCount_ != 0, other.minCount_);
        maxCount_ = visitor.visitInt(maxCount_ != 0, maxCount_,
            other.maxCount_ != 0, other.maxCount_);
        query_ = visitor.visitString(!query_.isEmpty(), query_,
            !other.query_.isEmpty(), other.query_);
        stringProperties_ = visitor.visitMap(
            stringProperties_, other.internalGetStringProperties());
        numericProperties_ = visitor.visitMap(
            numericProperties_, other.internalGetNumericProperties());
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 8: {

                minCount_ = input.readInt32();
                break;
              }
              case 16: {

                maxCount_ = input.readInt32();
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                query_ = s;
                break;
              }
              case 34: {
                if (!stringProperties_.isMutable()) {
                  stringProperties_ = stringProperties_.mutableCopy();
                }
                StringPropertiesDefaultEntryHolder.defaultEntry.parseInto(stringProperties_, input, extensionRegistry);  break;
              }
              case 42: {
                if (!numericProperties_.isMutable()) {
                  numericProperties_ = numericProperties_.mutableCopy();
                }
                NumericPropertiesDefaultEntryHolder.defaultEntry.parseInto(numericProperties_, input, extensionRegistry);  break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.MatchmakerAdd.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.MatchmakerAdd)
  private static final com.heroiclabs.nakama.rtapi.MatchmakerAdd DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MatchmakerAdd();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.MatchmakerAdd getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MatchmakerAdd> PARSER;

  public static com.google.protobuf.Parser<MatchmakerAdd> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

