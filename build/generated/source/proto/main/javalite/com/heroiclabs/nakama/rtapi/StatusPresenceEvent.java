// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * A batch of status updates for a given user.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.StatusPresenceEvent}
 */
public  final class StatusPresenceEvent extends
    com.google.protobuf.GeneratedMessageLite<
        StatusPresenceEvent, StatusPresenceEvent.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.StatusPresenceEvent)
    StatusPresenceEventOrBuilder {
  private StatusPresenceEvent() {
    joins_ = emptyProtobufList();
    leaves_ = emptyProtobufList();
  }
  public static final int JOINS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.rtapi.UserPresence> joins_;
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getJoinsList() {
    return joins_;
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getJoinsOrBuilderList() {
    return joins_;
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public int getJoinsCount() {
    return joins_.size();
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresence getJoins(int index) {
    return joins_.get(index);
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getJoinsOrBuilder(
      int index) {
    return joins_.get(index);
  }
  private void ensureJoinsIsMutable() {
    if (!joins_.isModifiable()) {
      joins_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(joins_);
     }
  }

  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void setJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureJoinsIsMutable();
    joins_.set(index, value);
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void setJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureJoinsIsMutable();
    joins_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureJoinsIsMutable();
    joins_.add(value);
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureJoinsIsMutable();
    joins_.add(index, value);
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(
      com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureJoinsIsMutable();
    joins_.add(builderForValue.build());
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureJoinsIsMutable();
    joins_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addAllJoins(
      java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
    ensureJoinsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, joins_);
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void clearJoins() {
    joins_ = emptyProtobufList();
  }
  /**
   * <pre>
   * New statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void removeJoins(int index) {
    ensureJoinsIsMutable();
    joins_.remove(index);
  }

  public static final int LEAVES_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.rtapi.UserPresence> leaves_;
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getLeavesList() {
    return leaves_;
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getLeavesOrBuilderList() {
    return leaves_;
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public int getLeavesCount() {
    return leaves_.size();
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresence getLeaves(int index) {
    return leaves_.get(index);
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getLeavesOrBuilder(
      int index) {
    return leaves_.get(index);
  }
  private void ensureLeavesIsMutable() {
    if (!leaves_.isModifiable()) {
      leaves_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(leaves_);
     }
  }

  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void setLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLeavesIsMutable();
    leaves_.set(index, value);
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void setLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureLeavesIsMutable();
    leaves_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLeavesIsMutable();
    leaves_.add(value);
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLeavesIsMutable();
    leaves_.add(index, value);
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(
      com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureLeavesIsMutable();
    leaves_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureLeavesIsMutable();
    leaves_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addAllLeaves(
      java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
    ensureLeavesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, leaves_);
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void clearLeaves() {
    leaves_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Previous statuses for the user.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void removeLeaves(int index) {
    ensureLeavesIsMutable();
    leaves_.remove(index);
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < joins_.size(); i++) {
      output.writeMessage(2, joins_.get(i));
    }
    for (int i = 0; i < leaves_.size(); i++) {
      output.writeMessage(3, leaves_.get(i));
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < joins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, joins_.get(i));
    }
    for (int i = 0; i < leaves_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, leaves_.get(i));
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.StatusPresenceEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A batch of status updates for a given user.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.StatusPresenceEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.StatusPresenceEvent, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.StatusPresenceEvent)
      com.heroiclabs.nakama.rtapi.StatusPresenceEventOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.StatusPresenceEvent.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getJoinsList() {
      return java.util.Collections.unmodifiableList(
          instance.getJoinsList());
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public int getJoinsCount() {
      return instance.getJoinsCount();
    }/**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getJoins(int index) {
      return instance.getJoins(index);
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder setJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.setJoins(index, value);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder setJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.setJoins(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addJoins(value);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addJoins(index, value);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addJoins(builderForValue);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addJoins(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addAllJoins(
        java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
      copyOnWrite();
      instance.addAllJoins(values);
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder clearJoins() {
      copyOnWrite();
      instance.clearJoins();
      return this;
    }
    /**
     * <pre>
     * New statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder removeJoins(int index) {
      copyOnWrite();
      instance.removeJoins(index);
      return this;
    }

    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getLeavesList() {
      return java.util.Collections.unmodifiableList(
          instance.getLeavesList());
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public int getLeavesCount() {
      return instance.getLeavesCount();
    }/**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getLeaves(int index) {
      return instance.getLeaves(index);
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder setLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.setLeaves(index, value);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder setLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.setLeaves(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addLeaves(value);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addLeaves(index, value);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addLeaves(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addLeaves(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addAllLeaves(
        java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
      copyOnWrite();
      instance.addAllLeaves(values);
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder clearLeaves() {
      copyOnWrite();
      instance.clearLeaves();
      return this;
    }
    /**
     * <pre>
     * Previous statuses for the user.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder removeLeaves(int index) {
      copyOnWrite();
      instance.removeLeaves(index);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.StatusPresenceEvent)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.StatusPresenceEvent();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        joins_.makeImmutable();
        leaves_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.StatusPresenceEvent other = (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) arg1;
        joins_= visitor.visitList(joins_, other.joins_);
        leaves_= visitor.visitList(leaves_, other.leaves_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 18: {
                if (!joins_.isModifiable()) {
                  joins_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(joins_);
                }
                joins_.add(
                    input.readMessage(com.heroiclabs.nakama.rtapi.UserPresence.parser(), extensionRegistry));
                break;
              }
              case 26: {
                if (!leaves_.isModifiable()) {
                  leaves_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(leaves_);
                }
                leaves_.add(
                    input.readMessage(com.heroiclabs.nakama.rtapi.UserPresence.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.StatusPresenceEvent.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.StatusPresenceEvent)
  private static final com.heroiclabs.nakama.rtapi.StatusPresenceEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StatusPresenceEvent();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.StatusPresenceEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StatusPresenceEvent> PARSER;

  public static com.google.protobuf.Parser<StatusPresenceEvent> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

