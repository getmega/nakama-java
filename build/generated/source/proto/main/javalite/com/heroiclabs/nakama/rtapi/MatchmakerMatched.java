// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * A successful matchmaking result.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.MatchmakerMatched}
 */
public  final class MatchmakerMatched extends
    com.google.protobuf.GeneratedMessageLite<
        MatchmakerMatched, MatchmakerMatched.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.MatchmakerMatched)
    MatchmakerMatchedOrBuilder {
  private MatchmakerMatched() {
    ticket_ = "";
    users_ = emptyProtobufList();
  }
  public interface MatchmakerUserOrBuilder extends
      // @@protoc_insertion_point(interface_extends:nakama.realtime.MatchmakerMatched.MatchmakerUser)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    boolean hasPresence();
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    com.heroiclabs.nakama.rtapi.UserPresence getPresence();

    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */
    int getStringPropertiesCount();
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */
    boolean containsStringProperties(
        java.lang.String key);
    /**
     * Use {@link #getStringPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.String>
    getStringProperties();
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */
    java.util.Map<java.lang.String, java.lang.String>
    getStringPropertiesMap();
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */

    java.lang.String getStringPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue);
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */

    java.lang.String getStringPropertiesOrThrow(
        java.lang.String key);

    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */
    int getNumericPropertiesCount();
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */
    boolean containsNumericProperties(
        java.lang.String key);
    /**
     * Use {@link #getNumericPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    java.util.Map<java.lang.String, java.lang.Double>
    getNumericProperties();
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */
    java.util.Map<java.lang.String, java.lang.Double>
    getNumericPropertiesMap();
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */

    double getNumericPropertiesOrDefault(
        java.lang.String key,
        double defaultValue);
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */

    double getNumericPropertiesOrThrow(
        java.lang.String key);
  }
  /**
   * Protobuf type {@code nakama.realtime.MatchmakerMatched.MatchmakerUser}
   */
  public  static final class MatchmakerUser extends
      com.google.protobuf.GeneratedMessageLite<
          MatchmakerUser, MatchmakerUser.Builder> implements
      // @@protoc_insertion_point(message_implements:nakama.realtime.MatchmakerMatched.MatchmakerUser)
      MatchmakerUserOrBuilder {
    private MatchmakerUser() {
    }
    private int bitField0_;
    public static final int PRESENCE_FIELD_NUMBER = 1;
    private com.heroiclabs.nakama.rtapi.UserPresence presence_;
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    public boolean hasPresence() {
      return presence_ != null;
    }
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getPresence() {
      return presence_ == null ? com.heroiclabs.nakama.rtapi.UserPresence.getDefaultInstance() : presence_;
    }
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    private void setPresence(com.heroiclabs.nakama.rtapi.UserPresence value) {
      if (value == null) {
        throw new NullPointerException();
      }
      presence_ = value;
      
      }
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    private void setPresence(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      presence_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    private void mergePresence(com.heroiclabs.nakama.rtapi.UserPresence value) {
      if (presence_ != null &&
          presence_ != com.heroiclabs.nakama.rtapi.UserPresence.getDefaultInstance()) {
        presence_ =
          com.heroiclabs.nakama.rtapi.UserPresence.newBuilder(presence_).mergeFrom(value).buildPartial();
      } else {
        presence_ = value;
      }
      
    }
    /**
     * <pre>
     * User info.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
     */
    private void clearPresence() {  presence_ = null;
      
    }

    public static final int STRING_PROPERTIES_FIELD_NUMBER = 5;
    private static final class StringPropertiesDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.String> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.String>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "");
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.String> stringProperties_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetStringProperties() {
      return stringProperties_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
    internalGetMutableStringProperties() {
      if (!stringProperties_.isMutable()) {
        stringProperties_ = stringProperties_.mutableCopy();
      }
      return stringProperties_;
    }

    public int getStringPropertiesCount() {
      return internalGetStringProperties().size();
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */

    public boolean containsStringProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetStringProperties().containsKey(key);
    }
    /**
     * Use {@link #getStringPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getStringProperties() {
      return getStringPropertiesMap();
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */

    public java.util.Map<java.lang.String, java.lang.String> getStringPropertiesMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetStringProperties());
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */

    public java.lang.String getStringPropertiesOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringProperties();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */

    public java.lang.String getStringPropertiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          internalGetStringProperties();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * String properties.
     * </pre>
     *
     * <code>map&lt;string, string&gt; string_properties = 5;</code>
     */
    private java.util.Map<java.lang.String, java.lang.String>
    getMutableStringPropertiesMap() {
      return internalGetMutableStringProperties();
    }

    public static final int NUMERIC_PROPERTIES_FIELD_NUMBER = 6;
    private static final class NumericPropertiesDefaultEntryHolder {
      static final com.google.protobuf.MapEntryLite<
          java.lang.String, java.lang.Double> defaultEntry =
              com.google.protobuf.MapEntryLite
              .<java.lang.String, java.lang.Double>newDefaultInstance(
                  com.google.protobuf.WireFormat.FieldType.STRING,
                  "",
                  com.google.protobuf.WireFormat.FieldType.DOUBLE,
                  0D);
    }
    private com.google.protobuf.MapFieldLite<
        java.lang.String, java.lang.Double> numericProperties_ =
            com.google.protobuf.MapFieldLite.emptyMapField();
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Double>
    internalGetNumericProperties() {
      return numericProperties_;
    }
    private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.Double>
    internalGetMutableNumericProperties() {
      if (!numericProperties_.isMutable()) {
        numericProperties_ = numericProperties_.mutableCopy();
      }
      return numericProperties_;
    }

    public int getNumericPropertiesCount() {
      return internalGetNumericProperties().size();
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */

    public boolean containsNumericProperties(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return internalGetNumericProperties().containsKey(key);
    }
    /**
     * Use {@link #getNumericPropertiesMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.Double> getNumericProperties() {
      return getNumericPropertiesMap();
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */

    public java.util.Map<java.lang.String, java.lang.Double> getNumericPropertiesMap() {
      return java.util.Collections.unmodifiableMap(
          internalGetNumericProperties());
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */

    public double getNumericPropertiesOrDefault(
        java.lang.String key,
        double defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetNumericProperties();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */

    public double getNumericPropertiesOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.Double> map =
          internalGetNumericProperties();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * Numeric properties.
     * </pre>
     *
     * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
     */
    private java.util.Map<java.lang.String, java.lang.Double>
    getMutableNumericPropertiesMap() {
      return internalGetMutableNumericProperties();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (presence_ != null) {
        output.writeMessage(1, getPresence());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetStringProperties().entrySet()) {
        StringPropertiesDefaultEntryHolder.defaultEntry.serializeTo(
            output, 5, entry.getKey(), entry.getValue());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
           : internalGetNumericProperties().entrySet()) {
        NumericPropertiesDefaultEntryHolder.defaultEntry.serializeTo(
            output, 6, entry.getKey(), entry.getValue());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (presence_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getPresence());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
           : internalGetStringProperties().entrySet()) {
        size += StringPropertiesDefaultEntryHolder.defaultEntry.computeMessageSize(
          5, entry.getKey(), entry.getValue());
      }
      for (java.util.Map.Entry<java.lang.String, java.lang.Double> entry
           : internalGetNumericProperties().entrySet()) {
        size += NumericPropertiesDefaultEntryHolder.defaultEntry.computeMessageSize(
          6, entry.getKey(), entry.getValue());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code nakama.realtime.MatchmakerMatched.MatchmakerUser}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser, Builder> implements
        // @@protoc_insertion_point(builder_implements:nakama.realtime.MatchmakerMatched.MatchmakerUser)
        com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUserOrBuilder {
      // Construct using com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * User info.
       * </pre>
       *
       * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
       */
      public boolean hasPresence() {
        return instance.hasPresence();
      }
      /**
       * <pre>
       * User info.
       * </pre>
       *
       * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
       */
      public com.heroiclabs.nakama.rtapi.UserPresence getPresence() {
        return instance.getPresence();
      }
      /**
       * <pre>
       * User info.
       * </pre>
       *
       * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
       */
      public Builder setPresence(com.heroiclabs.nakama.rtapi.UserPresence value) {
        copyOnWrite();
        instance.setPresence(value);
        return this;
        }
      /**
       * <pre>
       * User info.
       * </pre>
       *
       * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
       */
      public Builder setPresence(
          com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
        copyOnWrite();
        instance.setPresence(builderForValue);
        return this;
      }
      /**
       * <pre>
       * User info.
       * </pre>
       *
       * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
       */
      public Builder mergePresence(com.heroiclabs.nakama.rtapi.UserPresence value) {
        copyOnWrite();
        instance.mergePresence(value);
        return this;
      }
      /**
       * <pre>
       * User info.
       * </pre>
       *
       * <code>optional .nakama.realtime.UserPresence presence = 1;</code>
       */
      public Builder clearPresence() {  copyOnWrite();
        instance.clearPresence();
        return this;
      }


      public int getStringPropertiesCount() {
        return instance.getStringPropertiesMap().size();
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */

      public boolean containsStringProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getStringPropertiesMap().containsKey(key);
      }

      public Builder clearStringProperties() {
        copyOnWrite();
        instance.getMutableStringPropertiesMap().clear();
        return this;
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */

      public Builder removeStringProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableStringPropertiesMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getStringPropertiesMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.String> getStringProperties() {
        return getStringPropertiesMap();
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */
      public java.util.Map<java.lang.String, java.lang.String> getStringPropertiesMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getStringPropertiesMap());
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */

      public java.lang.String getStringPropertiesOrDefault(
          java.lang.String key,
          java.lang.String defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getStringPropertiesMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */

      public java.lang.String getStringPropertiesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.String> map =
            instance.getStringPropertiesMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */
      public Builder putStringProperties(
          java.lang.String key,
          java.lang.String value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        if (value == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableStringPropertiesMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * String properties.
       * </pre>
       *
       * <code>map&lt;string, string&gt; string_properties = 5;</code>
       */
      public Builder putAllStringProperties(
          java.util.Map<java.lang.String, java.lang.String> values) {
        copyOnWrite();
        instance.getMutableStringPropertiesMap().putAll(values);
        return this;
      }


      public int getNumericPropertiesCount() {
        return instance.getNumericPropertiesMap().size();
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */

      public boolean containsNumericProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        return instance.getNumericPropertiesMap().containsKey(key);
      }

      public Builder clearNumericProperties() {
        copyOnWrite();
        instance.getMutableNumericPropertiesMap().clear();
        return this;
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */

      public Builder removeNumericProperties(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        copyOnWrite();
        instance.getMutableNumericPropertiesMap().remove(key);
        return this;
      }
      /**
       * Use {@link #getNumericPropertiesMap()} instead.
       */
      @java.lang.Deprecated
      public java.util.Map<java.lang.String, java.lang.Double> getNumericProperties() {
        return getNumericPropertiesMap();
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */
      public java.util.Map<java.lang.String, java.lang.Double> getNumericPropertiesMap() {
        return java.util.Collections.unmodifiableMap(
            instance.getNumericPropertiesMap());
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */

      public double getNumericPropertiesOrDefault(
          java.lang.String key,
          double defaultValue) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Double> map =
            instance.getNumericPropertiesMap();
        return map.containsKey(key) ? map.get(key) : defaultValue;
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */

      public double getNumericPropertiesOrThrow(
          java.lang.String key) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        java.util.Map<java.lang.String, java.lang.Double> map =
            instance.getNumericPropertiesMap();
        if (!map.containsKey(key)) {
          throw new java.lang.IllegalArgumentException();
        }
        return map.get(key);
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */
      public Builder putNumericProperties(
          java.lang.String key,
          double value) {
        if (key == null) { throw new java.lang.NullPointerException(); }
        
        copyOnWrite();
        instance.getMutableNumericPropertiesMap().put(key, value);
        return this;
      }
      /**
       * <pre>
       * Numeric properties.
       * </pre>
       *
       * <code>map&lt;string, double&gt; numeric_properties = 6;</code>
       */
      public Builder putAllNumericProperties(
          java.util.Map<java.lang.String, java.lang.Double> values) {
        copyOnWrite();
        instance.getMutableNumericPropertiesMap().putAll(values);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:nakama.realtime.MatchmakerMatched.MatchmakerUser)
    }
    protected final Object dynamicMethod(
        com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          stringProperties_.makeImmutable();
          numericProperties_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser other = (com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser) arg1;
          presence_ = visitor.visitMessage(presence_, other.presence_);
          stringProperties_ = visitor.visitMap(
              stringProperties_, other.internalGetStringProperties());
          numericProperties_ = visitor.visitMap(
              numericProperties_, other.internalGetNumericProperties());
          if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
              .INSTANCE) {
            bitField0_ |= other.bitField0_;
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  com.heroiclabs.nakama.rtapi.UserPresence.Builder subBuilder = null;
                  if (presence_ != null) {
                    subBuilder = presence_.toBuilder();
                  }
                  presence_ = input.readMessage(com.heroiclabs.nakama.rtapi.UserPresence.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(presence_);
                    presence_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 42: {
                  if (!stringProperties_.isMutable()) {
                    stringProperties_ = stringProperties_.mutableCopy();
                  }
                  StringPropertiesDefaultEntryHolder.defaultEntry.parseInto(stringProperties_, input, extensionRegistry);  break;
                }
                case 50: {
                  if (!numericProperties_.isMutable()) {
                    numericProperties_ = numericProperties_.mutableCopy();
                  }
                  NumericPropertiesDefaultEntryHolder.defaultEntry.parseInto(numericProperties_, input, extensionRegistry);  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:nakama.realtime.MatchmakerMatched.MatchmakerUser)
    private static final com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new MatchmakerUser();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<MatchmakerUser> PARSER;

    public static com.google.protobuf.Parser<MatchmakerUser> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  private int bitField0_;
  private int idCase_ = 0;
  private java.lang.Object id_;
  public enum IdCase
      implements com.google.protobuf.Internal.EnumLite {
    MATCH_ID(2),
    TOKEN(3),
    ID_NOT_SET(0);
    private final int value;
    private IdCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IdCase valueOf(int value) {
      return forNumber(value);
    }

    public static IdCase forNumber(int value) {
      switch (value) {
        case 2: return MATCH_ID;
        case 3: return TOKEN;
        case 0: return ID_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public IdCase
  getIdCase() {
    return IdCase.forNumber(
        idCase_);
  }

  private void clearId() {
    idCase_ = 0;
    id_ = null;
  }

  public static final int TICKET_FIELD_NUMBER = 1;
  private java.lang.String ticket_;
  /**
   * <pre>
   * The matchmaking ticket that has completed.
   * </pre>
   *
   * <code>optional string ticket = 1;</code>
   */
  public java.lang.String getTicket() {
    return ticket_;
  }
  /**
   * <pre>
   * The matchmaking ticket that has completed.
   * </pre>
   *
   * <code>optional string ticket = 1;</code>
   */
  public com.google.protobuf.ByteString
      getTicketBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(ticket_);
  }
  /**
   * <pre>
   * The matchmaking ticket that has completed.
   * </pre>
   *
   * <code>optional string ticket = 1;</code>
   */
  private void setTicket(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    ticket_ = value;
  }
  /**
   * <pre>
   * The matchmaking ticket that has completed.
   * </pre>
   *
   * <code>optional string ticket = 1;</code>
   */
  private void clearTicket() {
    
    ticket_ = getDefaultInstance().getTicket();
  }
  /**
   * <pre>
   * The matchmaking ticket that has completed.
   * </pre>
   *
   * <code>optional string ticket = 1;</code>
   */
  private void setTicketBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    ticket_ = value.toStringUtf8();
  }

  public static final int MATCH_ID_FIELD_NUMBER = 2;
  /**
   * <pre>
   * Match ID.
   * </pre>
   *
   * <code>optional string match_id = 2;</code>
   */
  public java.lang.String getMatchId() {
    java.lang.String ref = "";
    if (idCase_ == 2) {
      ref = (java.lang.String) id_;
    }
    return ref;
  }
  /**
   * <pre>
   * Match ID.
   * </pre>
   *
   * <code>optional string match_id = 2;</code>
   */
  public com.google.protobuf.ByteString
      getMatchIdBytes() {
    java.lang.String ref = "";
    if (idCase_ == 2) {
      ref = (java.lang.String) id_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * Match ID.
   * </pre>
   *
   * <code>optional string match_id = 2;</code>
   */
  private void setMatchId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  idCase_ = 2;
    id_ = value;
  }
  /**
   * <pre>
   * Match ID.
   * </pre>
   *
   * <code>optional string match_id = 2;</code>
   */
  private void clearMatchId() {
    if (idCase_ == 2) {
      idCase_ = 0;
      id_ = null;
    }
  }
  /**
   * <pre>
   * Match ID.
   * </pre>
   *
   * <code>optional string match_id = 2;</code>
   */
  private void setMatchIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    idCase_ = 2;
    id_ = value.toStringUtf8();
  }

  public static final int TOKEN_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Match join token.
   * </pre>
   *
   * <code>optional string token = 3;</code>
   */
  public java.lang.String getToken() {
    java.lang.String ref = "";
    if (idCase_ == 3) {
      ref = (java.lang.String) id_;
    }
    return ref;
  }
  /**
   * <pre>
   * Match join token.
   * </pre>
   *
   * <code>optional string token = 3;</code>
   */
  public com.google.protobuf.ByteString
      getTokenBytes() {
    java.lang.String ref = "";
    if (idCase_ == 3) {
      ref = (java.lang.String) id_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * Match join token.
   * </pre>
   *
   * <code>optional string token = 3;</code>
   */
  private void setToken(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  idCase_ = 3;
    id_ = value;
  }
  /**
   * <pre>
   * Match join token.
   * </pre>
   *
   * <code>optional string token = 3;</code>
   */
  private void clearToken() {
    if (idCase_ == 3) {
      idCase_ = 0;
      id_ = null;
    }
  }
  /**
   * <pre>
   * Match join token.
   * </pre>
   *
   * <code>optional string token = 3;</code>
   */
  private void setTokenBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    idCase_ = 3;
    id_ = value.toStringUtf8();
  }

  public static final int USERS_FIELD_NUMBER = 4;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser> users_;
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  public java.util.List<com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser> getUsersList() {
    return users_;
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUserOrBuilder> 
      getUsersOrBuilderList() {
    return users_;
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  public int getUsersCount() {
    return users_.size();
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser getUsers(int index) {
    return users_.get(index);
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUserOrBuilder getUsersOrBuilder(
      int index) {
    return users_.get(index);
  }
  private void ensureUsersIsMutable() {
    if (!users_.isModifiable()) {
      users_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(users_);
     }
  }

  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void setUsers(
      int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureUsersIsMutable();
    users_.set(index, value);
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void setUsers(
      int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
    ensureUsersIsMutable();
    users_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void addUsers(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureUsersIsMutable();
    users_.add(value);
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void addUsers(
      int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureUsersIsMutable();
    users_.add(index, value);
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void addUsers(
      com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
    ensureUsersIsMutable();
    users_.add(builderForValue.build());
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void addUsers(
      int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
    ensureUsersIsMutable();
    users_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void addAllUsers(
      java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser> values) {
    ensureUsersIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, users_);
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void clearUsers() {
    users_ = emptyProtobufList();
  }
  /**
   * <pre>
   * The users that have been matched together, and information about their matchmaking data.
   * </pre>
   *
   * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
   */
  private void removeUsers(int index) {
    ensureUsersIsMutable();
    users_.remove(index);
  }

  public static final int SELF_FIELD_NUMBER = 5;
  private com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser self_;
  /**
   * <pre>
   * A reference to the current user and their properties.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
   */
  public boolean hasSelf() {
    return self_ != null;
  }
  /**
   * <pre>
   * A reference to the current user and their properties.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser getSelf() {
    return self_ == null ? com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.getDefaultInstance() : self_;
  }
  /**
   * <pre>
   * A reference to the current user and their properties.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
   */
  private void setSelf(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
    if (value == null) {
      throw new NullPointerException();
    }
    self_ = value;
    
    }
  /**
   * <pre>
   * A reference to the current user and their properties.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
   */
  private void setSelf(
      com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
    self_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * A reference to the current user and their properties.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
   */
  private void mergeSelf(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
    if (self_ != null &&
        self_ != com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.getDefaultInstance()) {
      self_ =
        com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.newBuilder(self_).mergeFrom(value).buildPartial();
    } else {
      self_ = value;
    }
    
  }
  /**
   * <pre>
   * A reference to the current user and their properties.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
   */
  private void clearSelf() {  self_ = null;
    
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!ticket_.isEmpty()) {
      output.writeString(1, getTicket());
    }
    if (idCase_ == 2) {
      output.writeString(2, getMatchId());
    }
    if (idCase_ == 3) {
      output.writeString(3, getToken());
    }
    for (int i = 0; i < users_.size(); i++) {
      output.writeMessage(4, users_.get(i));
    }
    if (self_ != null) {
      output.writeMessage(5, getSelf());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!ticket_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getTicket());
    }
    if (idCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getMatchId());
    }
    if (idCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getToken());
    }
    for (int i = 0; i < users_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, users_.get(i));
    }
    if (self_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, getSelf());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.MatchmakerMatched prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.MatchmakerMatched}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.MatchmakerMatched, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.MatchmakerMatched)
      com.heroiclabs.nakama.rtapi.MatchmakerMatchedOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.MatchmakerMatched.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public IdCase
        getIdCase() {
      return instance.getIdCase();
    }

    public Builder clearId() {
      copyOnWrite();
      instance.clearId();
      return this;
    }


    /**
     * <pre>
     * The matchmaking ticket that has completed.
     * </pre>
     *
     * <code>optional string ticket = 1;</code>
     */
    public java.lang.String getTicket() {
      return instance.getTicket();
    }
    /**
     * <pre>
     * The matchmaking ticket that has completed.
     * </pre>
     *
     * <code>optional string ticket = 1;</code>
     */
    public com.google.protobuf.ByteString
        getTicketBytes() {
      return instance.getTicketBytes();
    }
    /**
     * <pre>
     * The matchmaking ticket that has completed.
     * </pre>
     *
     * <code>optional string ticket = 1;</code>
     */
    public Builder setTicket(
        java.lang.String value) {
      copyOnWrite();
      instance.setTicket(value);
      return this;
    }
    /**
     * <pre>
     * The matchmaking ticket that has completed.
     * </pre>
     *
     * <code>optional string ticket = 1;</code>
     */
    public Builder clearTicket() {
      copyOnWrite();
      instance.clearTicket();
      return this;
    }
    /**
     * <pre>
     * The matchmaking ticket that has completed.
     * </pre>
     *
     * <code>optional string ticket = 1;</code>
     */
    public Builder setTicketBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTicketBytes(value);
      return this;
    }

    /**
     * <pre>
     * Match ID.
     * </pre>
     *
     * <code>optional string match_id = 2;</code>
     */
    public java.lang.String getMatchId() {
      return instance.getMatchId();
    }
    /**
     * <pre>
     * Match ID.
     * </pre>
     *
     * <code>optional string match_id = 2;</code>
     */
    public com.google.protobuf.ByteString
        getMatchIdBytes() {
      return instance.getMatchIdBytes();
    }
    /**
     * <pre>
     * Match ID.
     * </pre>
     *
     * <code>optional string match_id = 2;</code>
     */
    public Builder setMatchId(
        java.lang.String value) {
      copyOnWrite();
      instance.setMatchId(value);
      return this;
    }
    /**
     * <pre>
     * Match ID.
     * </pre>
     *
     * <code>optional string match_id = 2;</code>
     */
    public Builder clearMatchId() {
      copyOnWrite();
      instance.clearMatchId();
      return this;
    }
    /**
     * <pre>
     * Match ID.
     * </pre>
     *
     * <code>optional string match_id = 2;</code>
     */
    public Builder setMatchIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMatchIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Match join token.
     * </pre>
     *
     * <code>optional string token = 3;</code>
     */
    public java.lang.String getToken() {
      return instance.getToken();
    }
    /**
     * <pre>
     * Match join token.
     * </pre>
     *
     * <code>optional string token = 3;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      return instance.getTokenBytes();
    }
    /**
     * <pre>
     * Match join token.
     * </pre>
     *
     * <code>optional string token = 3;</code>
     */
    public Builder setToken(
        java.lang.String value) {
      copyOnWrite();
      instance.setToken(value);
      return this;
    }
    /**
     * <pre>
     * Match join token.
     * </pre>
     *
     * <code>optional string token = 3;</code>
     */
    public Builder clearToken() {
      copyOnWrite();
      instance.clearToken();
      return this;
    }
    /**
     * <pre>
     * Match join token.
     * </pre>
     *
     * <code>optional string token = 3;</code>
     */
    public Builder setTokenBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTokenBytes(value);
      return this;
    }

    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser> getUsersList() {
      return java.util.Collections.unmodifiableList(
          instance.getUsersList());
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public int getUsersCount() {
      return instance.getUsersCount();
    }/**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser getUsers(int index) {
      return instance.getUsers(index);
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder setUsers(
        int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
      copyOnWrite();
      instance.setUsers(index, value);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder setUsers(
        int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
      copyOnWrite();
      instance.setUsers(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder addUsers(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
      copyOnWrite();
      instance.addUsers(value);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder addUsers(
        int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
      copyOnWrite();
      instance.addUsers(index, value);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder addUsers(
        com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
      copyOnWrite();
      instance.addUsers(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder addUsers(
        int index, com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
      copyOnWrite();
      instance.addUsers(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder addAllUsers(
        java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser> values) {
      copyOnWrite();
      instance.addAllUsers(values);
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder clearUsers() {
      copyOnWrite();
      instance.clearUsers();
      return this;
    }
    /**
     * <pre>
     * The users that have been matched together, and information about their matchmaking data.
     * </pre>
     *
     * <code>repeated .nakama.realtime.MatchmakerMatched.MatchmakerUser users = 4;</code>
     */
    public Builder removeUsers(int index) {
      copyOnWrite();
      instance.removeUsers(index);
      return this;
    }

    /**
     * <pre>
     * A reference to the current user and their properties.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
     */
    public boolean hasSelf() {
      return instance.hasSelf();
    }
    /**
     * <pre>
     * A reference to the current user and their properties.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser getSelf() {
      return instance.getSelf();
    }
    /**
     * <pre>
     * A reference to the current user and their properties.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
     */
    public Builder setSelf(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
      copyOnWrite();
      instance.setSelf(value);
      return this;
      }
    /**
     * <pre>
     * A reference to the current user and their properties.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
     */
    public Builder setSelf(
        com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder builderForValue) {
      copyOnWrite();
      instance.setSelf(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A reference to the current user and their properties.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
     */
    public Builder mergeSelf(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser value) {
      copyOnWrite();
      instance.mergeSelf(value);
      return this;
    }
    /**
     * <pre>
     * A reference to the current user and their properties.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched.MatchmakerUser self = 5;</code>
     */
    public Builder clearSelf() {  copyOnWrite();
      instance.clearSelf();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.MatchmakerMatched)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.MatchmakerMatched();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        users_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.MatchmakerMatched other = (com.heroiclabs.nakama.rtapi.MatchmakerMatched) arg1;
        ticket_ = visitor.visitString(!ticket_.isEmpty(), ticket_,
            !other.ticket_.isEmpty(), other.ticket_);
        users_= visitor.visitList(users_, other.users_);
        self_ = visitor.visitMessage(self_, other.self_);
        switch (other.getIdCase()) {
          case MATCH_ID: {
            id_ = visitor.visitOneofString(
               idCase_ == 2, id_, other.id_);
            break;
          }
          case TOKEN: {
            id_ = visitor.visitOneofString(
               idCase_ == 3, id_, other.id_);
            break;
          }
          case ID_NOT_SET: {
            visitor.visitOneofNotSet(idCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.idCase_ != 0) {
            idCase_ = other.idCase_;
          }
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                ticket_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();
                idCase_ = 2;
                id_ = s;
                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();
                idCase_ = 3;
                id_ = s;
                break;
              }
              case 34: {
                if (!users_.isModifiable()) {
                  users_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(users_);
                }
                users_.add(
                    input.readMessage(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.parser(), extensionRegistry));
                break;
              }
              case 42: {
                com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.Builder subBuilder = null;
                if (self_ != null) {
                  subBuilder = self_.toBuilder();
                }
                self_ = input.readMessage(com.heroiclabs.nakama.rtapi.MatchmakerMatched.MatchmakerUser.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(self_);
                  self_ = subBuilder.buildPartial();
                }

                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.MatchmakerMatched.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.MatchmakerMatched)
  private static final com.heroiclabs.nakama.rtapi.MatchmakerMatched DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MatchmakerMatched();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.MatchmakerMatched getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MatchmakerMatched> PARSER;

  public static com.google.protobuf.Parser<MatchmakerMatched> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

