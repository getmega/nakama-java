// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * A set of joins and leaves on a particular channel.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.ChannelPresenceEvent}
 */
public  final class ChannelPresenceEvent extends
    com.google.protobuf.GeneratedMessageLite<
        ChannelPresenceEvent, ChannelPresenceEvent.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.ChannelPresenceEvent)
    ChannelPresenceEventOrBuilder {
  private ChannelPresenceEvent() {
    channelId_ = "";
    joins_ = emptyProtobufList();
    leaves_ = emptyProtobufList();
    roomName_ = "";
    groupId_ = "";
    userIdOne_ = "";
    userIdTwo_ = "";
  }
  private int bitField0_;
  public static final int CHANNEL_ID_FIELD_NUMBER = 1;
  private java.lang.String channelId_;
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  public java.lang.String getChannelId() {
    return channelId_;
  }
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getChannelIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(channelId_);
  }
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  private void setChannelId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    channelId_ = value;
  }
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  private void clearChannelId() {
    
    channelId_ = getDefaultInstance().getChannelId();
  }
  /**
   * <pre>
   * The channel identifier this event is for.
   * </pre>
   *
   * <code>optional string channel_id = 1;</code>
   */
  private void setChannelIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    channelId_ = value.toStringUtf8();
  }

  public static final int JOINS_FIELD_NUMBER = 2;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.rtapi.UserPresence> joins_;
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getJoinsList() {
    return joins_;
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getJoinsOrBuilderList() {
    return joins_;
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public int getJoinsCount() {
    return joins_.size();
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresence getJoins(int index) {
    return joins_.get(index);
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getJoinsOrBuilder(
      int index) {
    return joins_.get(index);
  }
  private void ensureJoinsIsMutable() {
    if (!joins_.isModifiable()) {
      joins_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(joins_);
     }
  }

  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void setJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureJoinsIsMutable();
    joins_.set(index, value);
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void setJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureJoinsIsMutable();
    joins_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureJoinsIsMutable();
    joins_.add(value);
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureJoinsIsMutable();
    joins_.add(index, value);
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(
      com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureJoinsIsMutable();
    joins_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addJoins(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureJoinsIsMutable();
    joins_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void addAllJoins(
      java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
    ensureJoinsIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, joins_);
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void clearJoins() {
    joins_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Presences joining the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
   */
  private void removeJoins(int index) {
    ensureJoinsIsMutable();
    joins_.remove(index);
  }

  public static final int LEAVES_FIELD_NUMBER = 3;
  private com.google.protobuf.Internal.ProtobufList<com.heroiclabs.nakama.rtapi.UserPresence> leaves_;
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getLeavesList() {
    return leaves_;
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public java.util.List<? extends com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder> 
      getLeavesOrBuilderList() {
    return leaves_;
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public int getLeavesCount() {
    return leaves_.size();
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresence getLeaves(int index) {
    return leaves_.get(index);
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresenceOrBuilder getLeavesOrBuilder(
      int index) {
    return leaves_.get(index);
  }
  private void ensureLeavesIsMutable() {
    if (!leaves_.isModifiable()) {
      leaves_ =
          com.google.protobuf.GeneratedMessageLite.mutableCopy(leaves_);
     }
  }

  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void setLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLeavesIsMutable();
    leaves_.set(index, value);
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void setLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureLeavesIsMutable();
    leaves_.set(index, builderForValue.build());
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLeavesIsMutable();
    leaves_.add(value);
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    ensureLeavesIsMutable();
    leaves_.add(index, value);
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(
      com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureLeavesIsMutable();
    leaves_.add(builderForValue.build());
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addLeaves(
      int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    ensureLeavesIsMutable();
    leaves_.add(index, builderForValue.build());
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void addAllLeaves(
      java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
    ensureLeavesIsMutable();
    com.google.protobuf.AbstractMessageLite.addAll(
        values, leaves_);
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void clearLeaves() {
    leaves_ = emptyProtobufList();
  }
  /**
   * <pre>
   * Presences leaving the channel as part of this event, if any.
   * </pre>
   *
   * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
   */
  private void removeLeaves(int index) {
    ensureLeavesIsMutable();
    leaves_.remove(index);
  }

  public static final int ROOM_NAME_FIELD_NUMBER = 4;
  private java.lang.String roomName_;
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  public java.lang.String getRoomName() {
    return roomName_;
  }
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  public com.google.protobuf.ByteString
      getRoomNameBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(roomName_);
  }
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  private void setRoomName(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    roomName_ = value;
  }
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  private void clearRoomName() {
    
    roomName_ = getDefaultInstance().getRoomName();
  }
  /**
   * <pre>
   * The name of the chat room, or an empty string if this message was not sent through a chat room.
   * </pre>
   *
   * <code>optional string room_name = 4;</code>
   */
  private void setRoomNameBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    roomName_ = value.toStringUtf8();
  }

  public static final int GROUP_ID_FIELD_NUMBER = 5;
  private java.lang.String groupId_;
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  public java.lang.String getGroupId() {
    return groupId_;
  }
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  public com.google.protobuf.ByteString
      getGroupIdBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(groupId_);
  }
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  private void setGroupId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    groupId_ = value;
  }
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  private void clearGroupId() {
    
    groupId_ = getDefaultInstance().getGroupId();
  }
  /**
   * <pre>
   * The ID of the group, or an empty string if this message was not sent through a group channel.
   * </pre>
   *
   * <code>optional string group_id = 5;</code>
   */
  private void setGroupIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    groupId_ = value.toStringUtf8();
  }

  public static final int USER_ID_ONE_FIELD_NUMBER = 6;
  private java.lang.String userIdOne_;
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  public java.lang.String getUserIdOne() {
    return userIdOne_;
  }
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  public com.google.protobuf.ByteString
      getUserIdOneBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(userIdOne_);
  }
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  private void setUserIdOne(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    userIdOne_ = value;
  }
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  private void clearUserIdOne() {
    
    userIdOne_ = getDefaultInstance().getUserIdOne();
  }
  /**
   * <pre>
   * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_one = 6;</code>
   */
  private void setUserIdOneBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    userIdOne_ = value.toStringUtf8();
  }

  public static final int USER_ID_TWO_FIELD_NUMBER = 7;
  private java.lang.String userIdTwo_;
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  public java.lang.String getUserIdTwo() {
    return userIdTwo_;
  }
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  public com.google.protobuf.ByteString
      getUserIdTwoBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(userIdTwo_);
  }
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  private void setUserIdTwo(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    userIdTwo_ = value;
  }
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  private void clearUserIdTwo() {
    
    userIdTwo_ = getDefaultInstance().getUserIdTwo();
  }
  /**
   * <pre>
   * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
   * </pre>
   *
   * <code>optional string user_id_two = 7;</code>
   */
  private void setUserIdTwoBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    userIdTwo_ = value.toStringUtf8();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!channelId_.isEmpty()) {
      output.writeString(1, getChannelId());
    }
    for (int i = 0; i < joins_.size(); i++) {
      output.writeMessage(2, joins_.get(i));
    }
    for (int i = 0; i < leaves_.size(); i++) {
      output.writeMessage(3, leaves_.get(i));
    }
    if (!roomName_.isEmpty()) {
      output.writeString(4, getRoomName());
    }
    if (!groupId_.isEmpty()) {
      output.writeString(5, getGroupId());
    }
    if (!userIdOne_.isEmpty()) {
      output.writeString(6, getUserIdOne());
    }
    if (!userIdTwo_.isEmpty()) {
      output.writeString(7, getUserIdTwo());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!channelId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getChannelId());
    }
    for (int i = 0; i < joins_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, joins_.get(i));
    }
    for (int i = 0; i < leaves_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, leaves_.get(i));
    }
    if (!roomName_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(4, getRoomName());
    }
    if (!groupId_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(5, getGroupId());
    }
    if (!userIdOne_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(6, getUserIdOne());
    }
    if (!userIdTwo_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(7, getUserIdTwo());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A set of joins and leaves on a particular channel.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.ChannelPresenceEvent}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.ChannelPresenceEvent, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.ChannelPresenceEvent)
      com.heroiclabs.nakama.rtapi.ChannelPresenceEventOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The channel identifier this event is for.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public java.lang.String getChannelId() {
      return instance.getChannelId();
    }
    /**
     * <pre>
     * The channel identifier this event is for.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getChannelIdBytes() {
      return instance.getChannelIdBytes();
    }
    /**
     * <pre>
     * The channel identifier this event is for.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public Builder setChannelId(
        java.lang.String value) {
      copyOnWrite();
      instance.setChannelId(value);
      return this;
    }
    /**
     * <pre>
     * The channel identifier this event is for.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public Builder clearChannelId() {
      copyOnWrite();
      instance.clearChannelId();
      return this;
    }
    /**
     * <pre>
     * The channel identifier this event is for.
     * </pre>
     *
     * <code>optional string channel_id = 1;</code>
     */
    public Builder setChannelIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setChannelIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getJoinsList() {
      return java.util.Collections.unmodifiableList(
          instance.getJoinsList());
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public int getJoinsCount() {
      return instance.getJoinsCount();
    }/**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getJoins(int index) {
      return instance.getJoins(index);
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder setJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.setJoins(index, value);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder setJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.setJoins(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addJoins(value);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addJoins(index, value);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addJoins(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addJoins(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addJoins(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder addAllJoins(
        java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
      copyOnWrite();
      instance.addAllJoins(values);
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder clearJoins() {
      copyOnWrite();
      instance.clearJoins();
      return this;
    }
    /**
     * <pre>
     * Presences joining the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence joins = 2;</code>
     */
    public Builder removeJoins(int index) {
      copyOnWrite();
      instance.removeJoins(index);
      return this;
    }

    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public java.util.List<com.heroiclabs.nakama.rtapi.UserPresence> getLeavesList() {
      return java.util.Collections.unmodifiableList(
          instance.getLeavesList());
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public int getLeavesCount() {
      return instance.getLeavesCount();
    }/**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getLeaves(int index) {
      return instance.getLeaves(index);
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder setLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.setLeaves(index, value);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder setLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.setLeaves(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addLeaves(value);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.addLeaves(index, value);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addLeaves(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addLeaves(
        int index, com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.addLeaves(index, builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder addAllLeaves(
        java.lang.Iterable<? extends com.heroiclabs.nakama.rtapi.UserPresence> values) {
      copyOnWrite();
      instance.addAllLeaves(values);
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder clearLeaves() {
      copyOnWrite();
      instance.clearLeaves();
      return this;
    }
    /**
     * <pre>
     * Presences leaving the channel as part of this event, if any.
     * </pre>
     *
     * <code>repeated .nakama.realtime.UserPresence leaves = 3;</code>
     */
    public Builder removeLeaves(int index) {
      copyOnWrite();
      instance.removeLeaves(index);
      return this;
    }

    /**
     * <pre>
     * The name of the chat room, or an empty string if this message was not sent through a chat room.
     * </pre>
     *
     * <code>optional string room_name = 4;</code>
     */
    public java.lang.String getRoomName() {
      return instance.getRoomName();
    }
    /**
     * <pre>
     * The name of the chat room, or an empty string if this message was not sent through a chat room.
     * </pre>
     *
     * <code>optional string room_name = 4;</code>
     */
    public com.google.protobuf.ByteString
        getRoomNameBytes() {
      return instance.getRoomNameBytes();
    }
    /**
     * <pre>
     * The name of the chat room, or an empty string if this message was not sent through a chat room.
     * </pre>
     *
     * <code>optional string room_name = 4;</code>
     */
    public Builder setRoomName(
        java.lang.String value) {
      copyOnWrite();
      instance.setRoomName(value);
      return this;
    }
    /**
     * <pre>
     * The name of the chat room, or an empty string if this message was not sent through a chat room.
     * </pre>
     *
     * <code>optional string room_name = 4;</code>
     */
    public Builder clearRoomName() {
      copyOnWrite();
      instance.clearRoomName();
      return this;
    }
    /**
     * <pre>
     * The name of the chat room, or an empty string if this message was not sent through a chat room.
     * </pre>
     *
     * <code>optional string room_name = 4;</code>
     */
    public Builder setRoomNameBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setRoomNameBytes(value);
      return this;
    }

    /**
     * <pre>
     * The ID of the group, or an empty string if this message was not sent through a group channel.
     * </pre>
     *
     * <code>optional string group_id = 5;</code>
     */
    public java.lang.String getGroupId() {
      return instance.getGroupId();
    }
    /**
     * <pre>
     * The ID of the group, or an empty string if this message was not sent through a group channel.
     * </pre>
     *
     * <code>optional string group_id = 5;</code>
     */
    public com.google.protobuf.ByteString
        getGroupIdBytes() {
      return instance.getGroupIdBytes();
    }
    /**
     * <pre>
     * The ID of the group, or an empty string if this message was not sent through a group channel.
     * </pre>
     *
     * <code>optional string group_id = 5;</code>
     */
    public Builder setGroupId(
        java.lang.String value) {
      copyOnWrite();
      instance.setGroupId(value);
      return this;
    }
    /**
     * <pre>
     * The ID of the group, or an empty string if this message was not sent through a group channel.
     * </pre>
     *
     * <code>optional string group_id = 5;</code>
     */
    public Builder clearGroupId() {
      copyOnWrite();
      instance.clearGroupId();
      return this;
    }
    /**
     * <pre>
     * The ID of the group, or an empty string if this message was not sent through a group channel.
     * </pre>
     *
     * <code>optional string group_id = 5;</code>
     */
    public Builder setGroupIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setGroupIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_one = 6;</code>
     */
    public java.lang.String getUserIdOne() {
      return instance.getUserIdOne();
    }
    /**
     * <pre>
     * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_one = 6;</code>
     */
    public com.google.protobuf.ByteString
        getUserIdOneBytes() {
      return instance.getUserIdOneBytes();
    }
    /**
     * <pre>
     * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_one = 6;</code>
     */
    public Builder setUserIdOne(
        java.lang.String value) {
      copyOnWrite();
      instance.setUserIdOne(value);
      return this;
    }
    /**
     * <pre>
     * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_one = 6;</code>
     */
    public Builder clearUserIdOne() {
      copyOnWrite();
      instance.clearUserIdOne();
      return this;
    }
    /**
     * <pre>
     * The ID of the first DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_one = 6;</code>
     */
    public Builder setUserIdOneBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUserIdOneBytes(value);
      return this;
    }

    /**
     * <pre>
     * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_two = 7;</code>
     */
    public java.lang.String getUserIdTwo() {
      return instance.getUserIdTwo();
    }
    /**
     * <pre>
     * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_two = 7;</code>
     */
    public com.google.protobuf.ByteString
        getUserIdTwoBytes() {
      return instance.getUserIdTwoBytes();
    }
    /**
     * <pre>
     * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_two = 7;</code>
     */
    public Builder setUserIdTwo(
        java.lang.String value) {
      copyOnWrite();
      instance.setUserIdTwo(value);
      return this;
    }
    /**
     * <pre>
     * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_two = 7;</code>
     */
    public Builder clearUserIdTwo() {
      copyOnWrite();
      instance.clearUserIdTwo();
      return this;
    }
    /**
     * <pre>
     * The ID of the second DM user, or an empty string if this message was not sent through a DM chat.
     * </pre>
     *
     * <code>optional string user_id_two = 7;</code>
     */
    public Builder setUserIdTwoBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setUserIdTwoBytes(value);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.ChannelPresenceEvent)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.ChannelPresenceEvent();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        joins_.makeImmutable();
        leaves_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.ChannelPresenceEvent other = (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) arg1;
        channelId_ = visitor.visitString(!channelId_.isEmpty(), channelId_,
            !other.channelId_.isEmpty(), other.channelId_);
        joins_= visitor.visitList(joins_, other.joins_);
        leaves_= visitor.visitList(leaves_, other.leaves_);
        roomName_ = visitor.visitString(!roomName_.isEmpty(), roomName_,
            !other.roomName_.isEmpty(), other.roomName_);
        groupId_ = visitor.visitString(!groupId_.isEmpty(), groupId_,
            !other.groupId_.isEmpty(), other.groupId_);
        userIdOne_ = visitor.visitString(!userIdOne_.isEmpty(), userIdOne_,
            !other.userIdOne_.isEmpty(), other.userIdOne_);
        userIdTwo_ = visitor.visitString(!userIdTwo_.isEmpty(), userIdTwo_,
            !other.userIdTwo_.isEmpty(), other.userIdTwo_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                channelId_ = s;
                break;
              }
              case 18: {
                if (!joins_.isModifiable()) {
                  joins_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(joins_);
                }
                joins_.add(
                    input.readMessage(com.heroiclabs.nakama.rtapi.UserPresence.parser(), extensionRegistry));
                break;
              }
              case 26: {
                if (!leaves_.isModifiable()) {
                  leaves_ =
                      com.google.protobuf.GeneratedMessageLite.mutableCopy(leaves_);
                }
                leaves_.add(
                    input.readMessage(com.heroiclabs.nakama.rtapi.UserPresence.parser(), extensionRegistry));
                break;
              }
              case 34: {
                String s = input.readStringRequireUtf8();

                roomName_ = s;
                break;
              }
              case 42: {
                String s = input.readStringRequireUtf8();

                groupId_ = s;
                break;
              }
              case 50: {
                String s = input.readStringRequireUtf8();

                userIdOne_ = s;
                break;
              }
              case 58: {
                String s = input.readStringRequireUtf8();

                userIdTwo_ = s;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.ChannelPresenceEvent)
  private static final com.heroiclabs.nakama.rtapi.ChannelPresenceEvent DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new ChannelPresenceEvent();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.ChannelPresenceEvent getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<ChannelPresenceEvent> PARSER;

  public static com.google.protobuf.Parser<ChannelPresenceEvent> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

