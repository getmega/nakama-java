// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * An envelope for a realtime message.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.Envelope}
 */
public  final class Envelope extends
    com.google.protobuf.GeneratedMessageLite<
        Envelope, Envelope.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.Envelope)
    EnvelopeOrBuilder {
  private Envelope() {
    cid_ = "";
  }
  private int messageCase_ = 0;
  private java.lang.Object message_;
  public enum MessageCase
      implements com.google.protobuf.Internal.EnumLite {
    CHANNEL(2),
    CHANNEL_JOIN(3),
    CHANNEL_LEAVE(4),
    CHANNEL_MESSAGE(5),
    CHANNEL_MESSAGE_ACK(6),
    CHANNEL_MESSAGE_SEND(7),
    CHANNEL_MESSAGE_UPDATE(8),
    CHANNEL_MESSAGE_REMOVE(9),
    CHANNEL_PRESENCE_EVENT(10),
    ERROR(11),
    MATCH(12),
    MATCH_CREATE(13),
    MATCH_DATA(14),
    MATCH_DATA_SEND(15),
    MATCH_JOIN(16),
    MATCH_LEAVE(17),
    MATCH_PRESENCE_EVENT(18),
    MATCHMAKER_ADD(19),
    MATCHMAKER_MATCHED(20),
    MATCHMAKER_REMOVE(21),
    MATCHMAKER_TICKET(22),
    NOTIFICATIONS(23),
    RPC(24),
    STATUS(25),
    STATUS_FOLLOW(26),
    STATUS_PRESENCE_EVENT(27),
    STATUS_UNFOLLOW(28),
    STATUS_UPDATE(29),
    STREAM_DATA(30),
    STREAM_PRESENCE_EVENT(31),
    PING(32),
    PONG(33),
    MESSAGE_NOT_SET(0);
    private final int value;
    private MessageCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static MessageCase valueOf(int value) {
      return forNumber(value);
    }

    public static MessageCase forNumber(int value) {
      switch (value) {
        case 2: return CHANNEL;
        case 3: return CHANNEL_JOIN;
        case 4: return CHANNEL_LEAVE;
        case 5: return CHANNEL_MESSAGE;
        case 6: return CHANNEL_MESSAGE_ACK;
        case 7: return CHANNEL_MESSAGE_SEND;
        case 8: return CHANNEL_MESSAGE_UPDATE;
        case 9: return CHANNEL_MESSAGE_REMOVE;
        case 10: return CHANNEL_PRESENCE_EVENT;
        case 11: return ERROR;
        case 12: return MATCH;
        case 13: return MATCH_CREATE;
        case 14: return MATCH_DATA;
        case 15: return MATCH_DATA_SEND;
        case 16: return MATCH_JOIN;
        case 17: return MATCH_LEAVE;
        case 18: return MATCH_PRESENCE_EVENT;
        case 19: return MATCHMAKER_ADD;
        case 20: return MATCHMAKER_MATCHED;
        case 21: return MATCHMAKER_REMOVE;
        case 22: return MATCHMAKER_TICKET;
        case 23: return NOTIFICATIONS;
        case 24: return RPC;
        case 25: return STATUS;
        case 26: return STATUS_FOLLOW;
        case 27: return STATUS_PRESENCE_EVENT;
        case 28: return STATUS_UNFOLLOW;
        case 29: return STATUS_UPDATE;
        case 30: return STREAM_DATA;
        case 31: return STREAM_PRESENCE_EVENT;
        case 32: return PING;
        case 33: return PONG;
        case 0: return MESSAGE_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public MessageCase
  getMessageCase() {
    return MessageCase.forNumber(
        messageCase_);
  }

  private void clearMessage() {
    messageCase_ = 0;
    message_ = null;
  }

  public static final int CID_FIELD_NUMBER = 1;
  private java.lang.String cid_;
  /**
   * <code>optional string cid = 1;</code>
   */
  public java.lang.String getCid() {
    return cid_;
  }
  /**
   * <code>optional string cid = 1;</code>
   */
  public com.google.protobuf.ByteString
      getCidBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(cid_);
  }
  /**
   * <code>optional string cid = 1;</code>
   */
  private void setCid(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    cid_ = value;
  }
  /**
   * <code>optional string cid = 1;</code>
   */
  private void clearCid() {
    
    cid_ = getDefaultInstance().getCid();
  }
  /**
   * <code>optional string cid = 1;</code>
   */
  private void setCidBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    cid_ = value.toStringUtf8();
  }

  public static final int CHANNEL_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>optional .nakama.realtime.Channel channel = 2;</code>
   */
  public com.heroiclabs.nakama.rtapi.Channel getChannel() {
    if (messageCase_ == 2) {
       return (com.heroiclabs.nakama.rtapi.Channel) message_;
    }
    return com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>optional .nakama.realtime.Channel channel = 2;</code>
   */
  private void setChannel(com.heroiclabs.nakama.rtapi.Channel value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 2;
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>optional .nakama.realtime.Channel channel = 2;</code>
   */
  private void setChannel(
      com.heroiclabs.nakama.rtapi.Channel.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 2;
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>optional .nakama.realtime.Channel channel = 2;</code>
   */
  private void mergeChannel(com.heroiclabs.nakama.rtapi.Channel value) {
    if (messageCase_ == 2 &&
        message_ != com.heroiclabs.nakama.rtapi.Channel.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Channel.newBuilder((com.heroiclabs.nakama.rtapi.Channel) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 2;
  }
  /**
   * <pre>
   * A response from a channel join operation.
   * </pre>
   *
   * <code>optional .nakama.realtime.Channel channel = 2;</code>
   */
  private void clearChannel() {
    if (messageCase_ == 2) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_JOIN_FIELD_NUMBER = 3;
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelJoin getChannelJoin() {
    if (messageCase_ == 3) {
       return (com.heroiclabs.nakama.rtapi.ChannelJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
   */
  private void setChannelJoin(com.heroiclabs.nakama.rtapi.ChannelJoin value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 3;
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
   */
  private void setChannelJoin(
      com.heroiclabs.nakama.rtapi.ChannelJoin.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 3;
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
   */
  private void mergeChannelJoin(com.heroiclabs.nakama.rtapi.ChannelJoin value) {
    if (messageCase_ == 3 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelJoin.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelJoin.newBuilder((com.heroiclabs.nakama.rtapi.ChannelJoin) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 3;
  }
  /**
   * <pre>
   * Join a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
   */
  private void clearChannelJoin() {
    if (messageCase_ == 3) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_LEAVE_FIELD_NUMBER = 4;
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelLeave getChannelLeave() {
    if (messageCase_ == 4) {
       return (com.heroiclabs.nakama.rtapi.ChannelLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
   */
  private void setChannelLeave(com.heroiclabs.nakama.rtapi.ChannelLeave value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 4;
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
   */
  private void setChannelLeave(
      com.heroiclabs.nakama.rtapi.ChannelLeave.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 4;
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
   */
  private void mergeChannelLeave(com.heroiclabs.nakama.rtapi.ChannelLeave value) {
    if (messageCase_ == 4 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelLeave.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelLeave.newBuilder((com.heroiclabs.nakama.rtapi.ChannelLeave) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 4;
  }
  /**
   * <pre>
   * Leave a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
   */
  private void clearChannelLeave() {
    if (messageCase_ == 4) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_MESSAGE_FIELD_NUMBER = 5;
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
   */
  public com.heroiclabs.nakama.api.ChannelMessage getChannelMessage() {
    if (messageCase_ == 5) {
       return (com.heroiclabs.nakama.api.ChannelMessage) message_;
    }
    return com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
   */
  private void setChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 5;
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
   */
  private void setChannelMessage(
      com.heroiclabs.nakama.api.ChannelMessage.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 5;
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
   */
  private void mergeChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
    if (messageCase_ == 5 &&
        message_ != com.heroiclabs.nakama.api.ChannelMessage.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.api.ChannelMessage.newBuilder((com.heroiclabs.nakama.api.ChannelMessage) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 5;
  }
  /**
   * <pre>
   * An incoming message on a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
   */
  private void clearChannelMessage() {
    if (messageCase_ == 5) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_MESSAGE_ACK_FIELD_NUMBER = 6;
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelMessageAck getChannelMessageAck() {
    if (messageCase_ == 6) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance();
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
   */
  private void setChannelMessageAck(com.heroiclabs.nakama.rtapi.ChannelMessageAck value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 6;
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
   */
  private void setChannelMessageAck(
      com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 6;
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
   */
  private void mergeChannelMessageAck(com.heroiclabs.nakama.rtapi.ChannelMessageAck value) {
    if (messageCase_ == 6 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelMessageAck.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelMessageAck.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 6;
  }
  /**
   * <pre>
   * An acknowledgement received in response to sending a message on a chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
   */
  private void clearChannelMessageAck() {
    if (messageCase_ == 6) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_MESSAGE_SEND_FIELD_NUMBER = 7;
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelMessageSend getChannelMessageSend() {
    if (messageCase_ == 7) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance();
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
   */
  private void setChannelMessageSend(com.heroiclabs.nakama.rtapi.ChannelMessageSend value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 7;
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
   */
  private void setChannelMessageSend(
      com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 7;
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
   */
  private void mergeChannelMessageSend(com.heroiclabs.nakama.rtapi.ChannelMessageSend value) {
    if (messageCase_ == 7 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelMessageSend.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelMessageSend.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 7;
  }
  /**
   * <pre>
   * Send a message to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
   */
  private void clearChannelMessageSend() {
    if (messageCase_ == 7) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_MESSAGE_UPDATE_FIELD_NUMBER = 8;
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelMessageUpdate getChannelMessageUpdate() {
    if (messageCase_ == 8) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
   */
  private void setChannelMessageUpdate(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 8;
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
   */
  private void setChannelMessageUpdate(
      com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 8;
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
   */
  private void mergeChannelMessageUpdate(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate value) {
    if (messageCase_ == 8 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 8;
  }
  /**
   * <pre>
   * Update a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
   */
  private void clearChannelMessageUpdate() {
    if (messageCase_ == 8) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_MESSAGE_REMOVE_FIELD_NUMBER = 9;
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelMessageRemove getChannelMessageRemove() {
    if (messageCase_ == 9) {
       return (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
   */
  private void setChannelMessageRemove(com.heroiclabs.nakama.rtapi.ChannelMessageRemove value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 9;
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
   */
  private void setChannelMessageRemove(
      com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 9;
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
   */
  private void mergeChannelMessageRemove(com.heroiclabs.nakama.rtapi.ChannelMessageRemove value) {
    if (messageCase_ == 9 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelMessageRemove.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelMessageRemove.newBuilder((com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 9;
  }
  /**
   * <pre>
   * Remove a message previously sent to a realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
   */
  private void clearChannelMessageRemove() {
    if (messageCase_ == 9) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int CHANNEL_PRESENCE_EVENT_FIELD_NUMBER = 10;
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
   */
  public com.heroiclabs.nakama.rtapi.ChannelPresenceEvent getChannelPresenceEvent() {
    if (messageCase_ == 10) {
       return (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
   */
  private void setChannelPresenceEvent(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 10;
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
   */
  private void setChannelPresenceEvent(
      com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 10;
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
   */
  private void mergeChannelPresenceEvent(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent value) {
    if (messageCase_ == 10 &&
        message_ != com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 10;
  }
  /**
   * <pre>
   * Presence update for a particular realtime chat channel.
   * </pre>
   *
   * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
   */
  private void clearChannelPresenceEvent() {
    if (messageCase_ == 10) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int ERROR_FIELD_NUMBER = 11;
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Error error = 11;</code>
   */
  public com.heroiclabs.nakama.rtapi.Error getError() {
    if (messageCase_ == 11) {
       return (com.heroiclabs.nakama.rtapi.Error) message_;
    }
    return com.heroiclabs.nakama.rtapi.Error.getDefaultInstance();
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Error error = 11;</code>
   */
  private void setError(com.heroiclabs.nakama.rtapi.Error value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 11;
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Error error = 11;</code>
   */
  private void setError(
      com.heroiclabs.nakama.rtapi.Error.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 11;
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Error error = 11;</code>
   */
  private void mergeError(com.heroiclabs.nakama.rtapi.Error value) {
    if (messageCase_ == 11 &&
        message_ != com.heroiclabs.nakama.rtapi.Error.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Error.newBuilder((com.heroiclabs.nakama.rtapi.Error) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 11;
  }
  /**
   * <pre>
   * Describes an error which occurred on the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Error error = 11;</code>
   */
  private void clearError() {
    if (messageCase_ == 11) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_FIELD_NUMBER = 12;
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.Match match = 12;</code>
   */
  public com.heroiclabs.nakama.rtapi.Match getMatch() {
    if (messageCase_ == 12) {
       return (com.heroiclabs.nakama.rtapi.Match) message_;
    }
    return com.heroiclabs.nakama.rtapi.Match.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.Match match = 12;</code>
   */
  private void setMatch(com.heroiclabs.nakama.rtapi.Match value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 12;
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.Match match = 12;</code>
   */
  private void setMatch(
      com.heroiclabs.nakama.rtapi.Match.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 12;
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.Match match = 12;</code>
   */
  private void mergeMatch(com.heroiclabs.nakama.rtapi.Match value) {
    if (messageCase_ == 12 &&
        message_ != com.heroiclabs.nakama.rtapi.Match.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Match.newBuilder((com.heroiclabs.nakama.rtapi.Match) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 12;
  }
  /**
   * <pre>
   * Incoming information about a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.Match match = 12;</code>
   */
  private void clearMatch() {
    if (messageCase_ == 12) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_CREATE_FIELD_NUMBER = 13;
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchCreate getMatchCreate() {
    if (messageCase_ == 13) {
       return (com.heroiclabs.nakama.rtapi.MatchCreate) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
   */
  private void setMatchCreate(com.heroiclabs.nakama.rtapi.MatchCreate value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 13;
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
   */
  private void setMatchCreate(
      com.heroiclabs.nakama.rtapi.MatchCreate.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 13;
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
   */
  private void mergeMatchCreate(com.heroiclabs.nakama.rtapi.MatchCreate value) {
    if (messageCase_ == 13 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchCreate.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchCreate.newBuilder((com.heroiclabs.nakama.rtapi.MatchCreate) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 13;
  }
  /**
   * <pre>
   * A client to server request to create a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
   */
  private void clearMatchCreate() {
    if (messageCase_ == 13) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_DATA_FIELD_NUMBER = 14;
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchData getMatchData() {
    if (messageCase_ == 14) {
       return (com.heroiclabs.nakama.rtapi.MatchData) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance();
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
   */
  private void setMatchData(com.heroiclabs.nakama.rtapi.MatchData value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 14;
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
   */
  private void setMatchData(
      com.heroiclabs.nakama.rtapi.MatchData.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 14;
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
   */
  private void mergeMatchData(com.heroiclabs.nakama.rtapi.MatchData value) {
    if (messageCase_ == 14 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchData.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchData.newBuilder((com.heroiclabs.nakama.rtapi.MatchData) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 14;
  }
  /**
   * <pre>
   * Incoming realtime match data delivered from the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
   */
  private void clearMatchData() {
    if (messageCase_ == 14) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_DATA_SEND_FIELD_NUMBER = 15;
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchDataSend getMatchDataSend() {
    if (messageCase_ == 15) {
       return (com.heroiclabs.nakama.rtapi.MatchDataSend) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
   */
  private void setMatchDataSend(com.heroiclabs.nakama.rtapi.MatchDataSend value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 15;
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
   */
  private void setMatchDataSend(
      com.heroiclabs.nakama.rtapi.MatchDataSend.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 15;
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
   */
  private void mergeMatchDataSend(com.heroiclabs.nakama.rtapi.MatchDataSend value) {
    if (messageCase_ == 15 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchDataSend.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchDataSend.newBuilder((com.heroiclabs.nakama.rtapi.MatchDataSend) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 15;
  }
  /**
   * <pre>
   * A client to server request to send data to a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
   */
  private void clearMatchDataSend() {
    if (messageCase_ == 15) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_JOIN_FIELD_NUMBER = 16;
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchJoin getMatchJoin() {
    if (messageCase_ == 16) {
       return (com.heroiclabs.nakama.rtapi.MatchJoin) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
   */
  private void setMatchJoin(com.heroiclabs.nakama.rtapi.MatchJoin value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 16;
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
   */
  private void setMatchJoin(
      com.heroiclabs.nakama.rtapi.MatchJoin.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 16;
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
   */
  private void mergeMatchJoin(com.heroiclabs.nakama.rtapi.MatchJoin value) {
    if (messageCase_ == 16 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchJoin.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchJoin.newBuilder((com.heroiclabs.nakama.rtapi.MatchJoin) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 16;
  }
  /**
   * <pre>
   * A client to server request to join a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
   */
  private void clearMatchJoin() {
    if (messageCase_ == 16) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_LEAVE_FIELD_NUMBER = 17;
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchLeave getMatchLeave() {
    if (messageCase_ == 17) {
       return (com.heroiclabs.nakama.rtapi.MatchLeave) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance();
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
   */
  private void setMatchLeave(com.heroiclabs.nakama.rtapi.MatchLeave value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 17;
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
   */
  private void setMatchLeave(
      com.heroiclabs.nakama.rtapi.MatchLeave.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 17;
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
   */
  private void mergeMatchLeave(com.heroiclabs.nakama.rtapi.MatchLeave value) {
    if (messageCase_ == 17 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchLeave.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchLeave.newBuilder((com.heroiclabs.nakama.rtapi.MatchLeave) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 17;
  }
  /**
   * <pre>
   * A client to server request to leave a realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
   */
  private void clearMatchLeave() {
    if (messageCase_ == 17) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCH_PRESENCE_EVENT_FIELD_NUMBER = 18;
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchPresenceEvent getMatchPresenceEvent() {
    if (messageCase_ == 18) {
       return (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
   */
  private void setMatchPresenceEvent(com.heroiclabs.nakama.rtapi.MatchPresenceEvent value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 18;
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
   */
  private void setMatchPresenceEvent(
      com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 18;
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
   */
  private void mergeMatchPresenceEvent(com.heroiclabs.nakama.rtapi.MatchPresenceEvent value) {
    if (messageCase_ == 18 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchPresenceEvent.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 18;
  }
  /**
   * <pre>
   * Presence update for a particular realtime match.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
   */
  private void clearMatchPresenceEvent() {
    if (messageCase_ == 18) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCHMAKER_ADD_FIELD_NUMBER = 19;
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerAdd getMatchmakerAdd() {
    if (messageCase_ == 19) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance();
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
   */
  private void setMatchmakerAdd(com.heroiclabs.nakama.rtapi.MatchmakerAdd value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 19;
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
   */
  private void setMatchmakerAdd(
      com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 19;
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
   */
  private void mergeMatchmakerAdd(com.heroiclabs.nakama.rtapi.MatchmakerAdd value) {
    if (messageCase_ == 19 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchmakerAdd.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchmakerAdd.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 19;
  }
  /**
   * <pre>
   * Submit a new matchmaking process request.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
   */
  private void clearMatchmakerAdd() {
    if (messageCase_ == 19) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCHMAKER_MATCHED_FIELD_NUMBER = 20;
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerMatched getMatchmakerMatched() {
    if (messageCase_ == 20) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance();
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
   */
  private void setMatchmakerMatched(com.heroiclabs.nakama.rtapi.MatchmakerMatched value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 20;
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
   */
  private void setMatchmakerMatched(
      com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 20;
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
   */
  private void mergeMatchmakerMatched(com.heroiclabs.nakama.rtapi.MatchmakerMatched value) {
    if (messageCase_ == 20 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchmakerMatched.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchmakerMatched.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 20;
  }
  /**
   * <pre>
   * A successful matchmaking result.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
   */
  private void clearMatchmakerMatched() {
    if (messageCase_ == 20) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCHMAKER_REMOVE_FIELD_NUMBER = 21;
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerRemove getMatchmakerRemove() {
    if (messageCase_ == 21) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance();
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
   */
  private void setMatchmakerRemove(com.heroiclabs.nakama.rtapi.MatchmakerRemove value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 21;
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
   */
  private void setMatchmakerRemove(
      com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 21;
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
   */
  private void mergeMatchmakerRemove(com.heroiclabs.nakama.rtapi.MatchmakerRemove value) {
    if (messageCase_ == 21 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchmakerRemove.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchmakerRemove.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 21;
  }
  /**
   * <pre>
   * Cancel a matchmaking process using a ticket.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
   */
  private void clearMatchmakerRemove() {
    if (messageCase_ == 21) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int MATCHMAKER_TICKET_FIELD_NUMBER = 22;
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
   */
  public com.heroiclabs.nakama.rtapi.MatchmakerTicket getMatchmakerTicket() {
    if (messageCase_ == 22) {
       return (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_;
    }
    return com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance();
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
   */
  private void setMatchmakerTicket(com.heroiclabs.nakama.rtapi.MatchmakerTicket value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 22;
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
   */
  private void setMatchmakerTicket(
      com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 22;
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
   */
  private void mergeMatchmakerTicket(com.heroiclabs.nakama.rtapi.MatchmakerTicket value) {
    if (messageCase_ == 22 &&
        message_ != com.heroiclabs.nakama.rtapi.MatchmakerTicket.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.MatchmakerTicket.newBuilder((com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 22;
  }
  /**
   * <pre>
   * A response from starting a new matchmaking process.
   * </pre>
   *
   * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
   */
  private void clearMatchmakerTicket() {
    if (messageCase_ == 22) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int NOTIFICATIONS_FIELD_NUMBER = 23;
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
   */
  public com.heroiclabs.nakama.rtapi.Notifications getNotifications() {
    if (messageCase_ == 23) {
       return (com.heroiclabs.nakama.rtapi.Notifications) message_;
    }
    return com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance();
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
   */
  private void setNotifications(com.heroiclabs.nakama.rtapi.Notifications value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 23;
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
   */
  private void setNotifications(
      com.heroiclabs.nakama.rtapi.Notifications.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 23;
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
   */
  private void mergeNotifications(com.heroiclabs.nakama.rtapi.Notifications value) {
    if (messageCase_ == 23 &&
        message_ != com.heroiclabs.nakama.rtapi.Notifications.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Notifications.newBuilder((com.heroiclabs.nakama.rtapi.Notifications) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 23;
  }
  /**
   * <pre>
   * Notifications send by the server.
   * </pre>
   *
   * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
   */
  private void clearNotifications() {
    if (messageCase_ == 23) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int RPC_FIELD_NUMBER = 24;
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>optional .nakama.api.Rpc rpc = 24;</code>
   */
  public com.heroiclabs.nakama.api.Rpc getRpc() {
    if (messageCase_ == 24) {
       return (com.heroiclabs.nakama.api.Rpc) message_;
    }
    return com.heroiclabs.nakama.api.Rpc.getDefaultInstance();
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>optional .nakama.api.Rpc rpc = 24;</code>
   */
  private void setRpc(com.heroiclabs.nakama.api.Rpc value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 24;
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>optional .nakama.api.Rpc rpc = 24;</code>
   */
  private void setRpc(
      com.heroiclabs.nakama.api.Rpc.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 24;
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>optional .nakama.api.Rpc rpc = 24;</code>
   */
  private void mergeRpc(com.heroiclabs.nakama.api.Rpc value) {
    if (messageCase_ == 24 &&
        message_ != com.heroiclabs.nakama.api.Rpc.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.api.Rpc.newBuilder((com.heroiclabs.nakama.api.Rpc) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 24;
  }
  /**
   * <pre>
   * RPC call or response.
   * </pre>
   *
   * <code>optional .nakama.api.Rpc rpc = 24;</code>
   */
  private void clearRpc() {
    if (messageCase_ == 24) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STATUS_FIELD_NUMBER = 25;
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>optional .nakama.realtime.Status status = 25;</code>
   */
  public com.heroiclabs.nakama.rtapi.Status getStatus() {
    if (messageCase_ == 25) {
       return (com.heroiclabs.nakama.rtapi.Status) message_;
    }
    return com.heroiclabs.nakama.rtapi.Status.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>optional .nakama.realtime.Status status = 25;</code>
   */
  private void setStatus(com.heroiclabs.nakama.rtapi.Status value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 25;
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>optional .nakama.realtime.Status status = 25;</code>
   */
  private void setStatus(
      com.heroiclabs.nakama.rtapi.Status.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 25;
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>optional .nakama.realtime.Status status = 25;</code>
   */
  private void mergeStatus(com.heroiclabs.nakama.rtapi.Status value) {
    if (messageCase_ == 25 &&
        message_ != com.heroiclabs.nakama.rtapi.Status.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Status.newBuilder((com.heroiclabs.nakama.rtapi.Status) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 25;
  }
  /**
   * <pre>
   * An incoming status snapshot for some set of users.
   * </pre>
   *
   * <code>optional .nakama.realtime.Status status = 25;</code>
   */
  private void clearStatus() {
    if (messageCase_ == 25) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STATUS_FOLLOW_FIELD_NUMBER = 26;
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
   */
  public com.heroiclabs.nakama.rtapi.StatusFollow getStatusFollow() {
    if (messageCase_ == 26) {
       return (com.heroiclabs.nakama.rtapi.StatusFollow) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance();
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
   */
  private void setStatusFollow(com.heroiclabs.nakama.rtapi.StatusFollow value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 26;
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
   */
  private void setStatusFollow(
      com.heroiclabs.nakama.rtapi.StatusFollow.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 26;
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
   */
  private void mergeStatusFollow(com.heroiclabs.nakama.rtapi.StatusFollow value) {
    if (messageCase_ == 26 &&
        message_ != com.heroiclabs.nakama.rtapi.StatusFollow.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.StatusFollow.newBuilder((com.heroiclabs.nakama.rtapi.StatusFollow) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 26;
  }
  /**
   * <pre>
   * Start following some set of users to receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
   */
  private void clearStatusFollow() {
    if (messageCase_ == 26) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STATUS_PRESENCE_EVENT_FIELD_NUMBER = 27;
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
   */
  public com.heroiclabs.nakama.rtapi.StatusPresenceEvent getStatusPresenceEvent() {
    if (messageCase_ == 27) {
       return (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
   */
  private void setStatusPresenceEvent(com.heroiclabs.nakama.rtapi.StatusPresenceEvent value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 27;
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
   */
  private void setStatusPresenceEvent(
      com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 27;
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
   */
  private void mergeStatusPresenceEvent(com.heroiclabs.nakama.rtapi.StatusPresenceEvent value) {
    if (messageCase_ == 27 &&
        message_ != com.heroiclabs.nakama.rtapi.StatusPresenceEvent.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.StatusPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 27;
  }
  /**
   * <pre>
   * An incoming status update.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
   */
  private void clearStatusPresenceEvent() {
    if (messageCase_ == 27) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STATUS_UNFOLLOW_FIELD_NUMBER = 28;
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
   */
  public com.heroiclabs.nakama.rtapi.StatusUnfollow getStatusUnfollow() {
    if (messageCase_ == 28) {
       return (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance();
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
   */
  private void setStatusUnfollow(com.heroiclabs.nakama.rtapi.StatusUnfollow value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 28;
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
   */
  private void setStatusUnfollow(
      com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 28;
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
   */
  private void mergeStatusUnfollow(com.heroiclabs.nakama.rtapi.StatusUnfollow value) {
    if (messageCase_ == 28 &&
        message_ != com.heroiclabs.nakama.rtapi.StatusUnfollow.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.StatusUnfollow.newBuilder((com.heroiclabs.nakama.rtapi.StatusUnfollow) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 28;
  }
  /**
   * <pre>
   * Stop following some set of users to no longer receive their status updates.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
   */
  private void clearStatusUnfollow() {
    if (messageCase_ == 28) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STATUS_UPDATE_FIELD_NUMBER = 29;
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
   */
  public com.heroiclabs.nakama.rtapi.StatusUpdate getStatusUpdate() {
    if (messageCase_ == 29) {
       return (com.heroiclabs.nakama.rtapi.StatusUpdate) message_;
    }
    return com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance();
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
   */
  private void setStatusUpdate(com.heroiclabs.nakama.rtapi.StatusUpdate value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 29;
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
   */
  private void setStatusUpdate(
      com.heroiclabs.nakama.rtapi.StatusUpdate.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 29;
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
   */
  private void mergeStatusUpdate(com.heroiclabs.nakama.rtapi.StatusUpdate value) {
    if (messageCase_ == 29 &&
        message_ != com.heroiclabs.nakama.rtapi.StatusUpdate.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.StatusUpdate.newBuilder((com.heroiclabs.nakama.rtapi.StatusUpdate) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 29;
  }
  /**
   * <pre>
   * Set the user's own status.
   * </pre>
   *
   * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
   */
  private void clearStatusUpdate() {
    if (messageCase_ == 29) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STREAM_DATA_FIELD_NUMBER = 30;
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
   */
  public com.heroiclabs.nakama.rtapi.StreamData getStreamData() {
    if (messageCase_ == 30) {
       return (com.heroiclabs.nakama.rtapi.StreamData) message_;
    }
    return com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance();
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
   */
  private void setStreamData(com.heroiclabs.nakama.rtapi.StreamData value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 30;
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
   */
  private void setStreamData(
      com.heroiclabs.nakama.rtapi.StreamData.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 30;
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
   */
  private void mergeStreamData(com.heroiclabs.nakama.rtapi.StreamData value) {
    if (messageCase_ == 30 &&
        message_ != com.heroiclabs.nakama.rtapi.StreamData.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.StreamData.newBuilder((com.heroiclabs.nakama.rtapi.StreamData) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 30;
  }
  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
   */
  private void clearStreamData() {
    if (messageCase_ == 30) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int STREAM_PRESENCE_EVENT_FIELD_NUMBER = 31;
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
   */
  public com.heroiclabs.nakama.rtapi.StreamPresenceEvent getStreamPresenceEvent() {
    if (messageCase_ == 31) {
       return (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_;
    }
    return com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance();
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
   */
  private void setStreamPresenceEvent(com.heroiclabs.nakama.rtapi.StreamPresenceEvent value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 31;
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
   */
  private void setStreamPresenceEvent(
      com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 31;
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
   */
  private void mergeStreamPresenceEvent(com.heroiclabs.nakama.rtapi.StreamPresenceEvent value) {
    if (messageCase_ == 31 &&
        message_ != com.heroiclabs.nakama.rtapi.StreamPresenceEvent.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.StreamPresenceEvent.newBuilder((com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 31;
  }
  /**
   * <pre>
   * Presence update for a particular stream.
   * </pre>
   *
   * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
   */
  private void clearStreamPresenceEvent() {
    if (messageCase_ == 31) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int PING_FIELD_NUMBER = 32;
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>optional .nakama.realtime.Ping ping = 32;</code>
   */
  public com.heroiclabs.nakama.rtapi.Ping getPing() {
    if (messageCase_ == 32) {
       return (com.heroiclabs.nakama.rtapi.Ping) message_;
    }
    return com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance();
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>optional .nakama.realtime.Ping ping = 32;</code>
   */
  private void setPing(com.heroiclabs.nakama.rtapi.Ping value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 32;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>optional .nakama.realtime.Ping ping = 32;</code>
   */
  private void setPing(
      com.heroiclabs.nakama.rtapi.Ping.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 32;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>optional .nakama.realtime.Ping ping = 32;</code>
   */
  private void mergePing(com.heroiclabs.nakama.rtapi.Ping value) {
    if (messageCase_ == 32 &&
        message_ != com.heroiclabs.nakama.rtapi.Ping.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Ping.newBuilder((com.heroiclabs.nakama.rtapi.Ping) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 32;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check.
   * </pre>
   *
   * <code>optional .nakama.realtime.Ping ping = 32;</code>
   */
  private void clearPing() {
    if (messageCase_ == 32) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public static final int PONG_FIELD_NUMBER = 33;
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>optional .nakama.realtime.Pong pong = 33;</code>
   */
  public com.heroiclabs.nakama.rtapi.Pong getPong() {
    if (messageCase_ == 33) {
       return (com.heroiclabs.nakama.rtapi.Pong) message_;
    }
    return com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance();
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>optional .nakama.realtime.Pong pong = 33;</code>
   */
  private void setPong(com.heroiclabs.nakama.rtapi.Pong value) {
    if (value == null) {
      throw new NullPointerException();
    }
    message_ = value;
    messageCase_ = 33;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>optional .nakama.realtime.Pong pong = 33;</code>
   */
  private void setPong(
      com.heroiclabs.nakama.rtapi.Pong.Builder builderForValue) {
    message_ = builderForValue.build();
    messageCase_ = 33;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>optional .nakama.realtime.Pong pong = 33;</code>
   */
  private void mergePong(com.heroiclabs.nakama.rtapi.Pong value) {
    if (messageCase_ == 33 &&
        message_ != com.heroiclabs.nakama.rtapi.Pong.getDefaultInstance()) {
      message_ = com.heroiclabs.nakama.rtapi.Pong.newBuilder((com.heroiclabs.nakama.rtapi.Pong) message_)
          .mergeFrom(value).buildPartial();
    } else {
      message_ = value;
    }
    messageCase_ = 33;
  }
  /**
   * <pre>
   * Application-level heartbeat and connection check response.
   * </pre>
   *
   * <code>optional .nakama.realtime.Pong pong = 33;</code>
   */
  private void clearPong() {
    if (messageCase_ == 33) {
      messageCase_ = 0;
      message_ = null;
    }
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (!cid_.isEmpty()) {
      output.writeString(1, getCid());
    }
    if (messageCase_ == 2) {
      output.writeMessage(2, (com.heroiclabs.nakama.rtapi.Channel) message_);
    }
    if (messageCase_ == 3) {
      output.writeMessage(3, (com.heroiclabs.nakama.rtapi.ChannelJoin) message_);
    }
    if (messageCase_ == 4) {
      output.writeMessage(4, (com.heroiclabs.nakama.rtapi.ChannelLeave) message_);
    }
    if (messageCase_ == 5) {
      output.writeMessage(5, (com.heroiclabs.nakama.api.ChannelMessage) message_);
    }
    if (messageCase_ == 6) {
      output.writeMessage(6, (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_);
    }
    if (messageCase_ == 7) {
      output.writeMessage(7, (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_);
    }
    if (messageCase_ == 8) {
      output.writeMessage(8, (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_);
    }
    if (messageCase_ == 9) {
      output.writeMessage(9, (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_);
    }
    if (messageCase_ == 10) {
      output.writeMessage(10, (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_);
    }
    if (messageCase_ == 11) {
      output.writeMessage(11, (com.heroiclabs.nakama.rtapi.Error) message_);
    }
    if (messageCase_ == 12) {
      output.writeMessage(12, (com.heroiclabs.nakama.rtapi.Match) message_);
    }
    if (messageCase_ == 13) {
      output.writeMessage(13, (com.heroiclabs.nakama.rtapi.MatchCreate) message_);
    }
    if (messageCase_ == 14) {
      output.writeMessage(14, (com.heroiclabs.nakama.rtapi.MatchData) message_);
    }
    if (messageCase_ == 15) {
      output.writeMessage(15, (com.heroiclabs.nakama.rtapi.MatchDataSend) message_);
    }
    if (messageCase_ == 16) {
      output.writeMessage(16, (com.heroiclabs.nakama.rtapi.MatchJoin) message_);
    }
    if (messageCase_ == 17) {
      output.writeMessage(17, (com.heroiclabs.nakama.rtapi.MatchLeave) message_);
    }
    if (messageCase_ == 18) {
      output.writeMessage(18, (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_);
    }
    if (messageCase_ == 19) {
      output.writeMessage(19, (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_);
    }
    if (messageCase_ == 20) {
      output.writeMessage(20, (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_);
    }
    if (messageCase_ == 21) {
      output.writeMessage(21, (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_);
    }
    if (messageCase_ == 22) {
      output.writeMessage(22, (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_);
    }
    if (messageCase_ == 23) {
      output.writeMessage(23, (com.heroiclabs.nakama.rtapi.Notifications) message_);
    }
    if (messageCase_ == 24) {
      output.writeMessage(24, (com.heroiclabs.nakama.api.Rpc) message_);
    }
    if (messageCase_ == 25) {
      output.writeMessage(25, (com.heroiclabs.nakama.rtapi.Status) message_);
    }
    if (messageCase_ == 26) {
      output.writeMessage(26, (com.heroiclabs.nakama.rtapi.StatusFollow) message_);
    }
    if (messageCase_ == 27) {
      output.writeMessage(27, (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_);
    }
    if (messageCase_ == 28) {
      output.writeMessage(28, (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_);
    }
    if (messageCase_ == 29) {
      output.writeMessage(29, (com.heroiclabs.nakama.rtapi.StatusUpdate) message_);
    }
    if (messageCase_ == 30) {
      output.writeMessage(30, (com.heroiclabs.nakama.rtapi.StreamData) message_);
    }
    if (messageCase_ == 31) {
      output.writeMessage(31, (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_);
    }
    if (messageCase_ == 32) {
      output.writeMessage(32, (com.heroiclabs.nakama.rtapi.Ping) message_);
    }
    if (messageCase_ == 33) {
      output.writeMessage(33, (com.heroiclabs.nakama.rtapi.Pong) message_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (!cid_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getCid());
    }
    if (messageCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, (com.heroiclabs.nakama.rtapi.Channel) message_);
    }
    if (messageCase_ == 3) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, (com.heroiclabs.nakama.rtapi.ChannelJoin) message_);
    }
    if (messageCase_ == 4) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, (com.heroiclabs.nakama.rtapi.ChannelLeave) message_);
    }
    if (messageCase_ == 5) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, (com.heroiclabs.nakama.api.ChannelMessage) message_);
    }
    if (messageCase_ == 6) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(6, (com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_);
    }
    if (messageCase_ == 7) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(7, (com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_);
    }
    if (messageCase_ == 8) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(8, (com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_);
    }
    if (messageCase_ == 9) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(9, (com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_);
    }
    if (messageCase_ == 10) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(10, (com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_);
    }
    if (messageCase_ == 11) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(11, (com.heroiclabs.nakama.rtapi.Error) message_);
    }
    if (messageCase_ == 12) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(12, (com.heroiclabs.nakama.rtapi.Match) message_);
    }
    if (messageCase_ == 13) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(13, (com.heroiclabs.nakama.rtapi.MatchCreate) message_);
    }
    if (messageCase_ == 14) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(14, (com.heroiclabs.nakama.rtapi.MatchData) message_);
    }
    if (messageCase_ == 15) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(15, (com.heroiclabs.nakama.rtapi.MatchDataSend) message_);
    }
    if (messageCase_ == 16) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(16, (com.heroiclabs.nakama.rtapi.MatchJoin) message_);
    }
    if (messageCase_ == 17) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(17, (com.heroiclabs.nakama.rtapi.MatchLeave) message_);
    }
    if (messageCase_ == 18) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(18, (com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_);
    }
    if (messageCase_ == 19) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(19, (com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_);
    }
    if (messageCase_ == 20) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(20, (com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_);
    }
    if (messageCase_ == 21) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(21, (com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_);
    }
    if (messageCase_ == 22) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(22, (com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_);
    }
    if (messageCase_ == 23) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(23, (com.heroiclabs.nakama.rtapi.Notifications) message_);
    }
    if (messageCase_ == 24) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(24, (com.heroiclabs.nakama.api.Rpc) message_);
    }
    if (messageCase_ == 25) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(25, (com.heroiclabs.nakama.rtapi.Status) message_);
    }
    if (messageCase_ == 26) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(26, (com.heroiclabs.nakama.rtapi.StatusFollow) message_);
    }
    if (messageCase_ == 27) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(27, (com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_);
    }
    if (messageCase_ == 28) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(28, (com.heroiclabs.nakama.rtapi.StatusUnfollow) message_);
    }
    if (messageCase_ == 29) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(29, (com.heroiclabs.nakama.rtapi.StatusUpdate) message_);
    }
    if (messageCase_ == 30) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(30, (com.heroiclabs.nakama.rtapi.StreamData) message_);
    }
    if (messageCase_ == 31) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(31, (com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_);
    }
    if (messageCase_ == 32) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(32, (com.heroiclabs.nakama.rtapi.Ping) message_);
    }
    if (messageCase_ == 33) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(33, (com.heroiclabs.nakama.rtapi.Pong) message_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.Envelope parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.Envelope prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * An envelope for a realtime message.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.Envelope}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.Envelope, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.Envelope)
      com.heroiclabs.nakama.rtapi.EnvelopeOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.Envelope.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public MessageCase
        getMessageCase() {
      return instance.getMessageCase();
    }

    public Builder clearMessage() {
      copyOnWrite();
      instance.clearMessage();
      return this;
    }


    /**
     * <code>optional string cid = 1;</code>
     */
    public java.lang.String getCid() {
      return instance.getCid();
    }
    /**
     * <code>optional string cid = 1;</code>
     */
    public com.google.protobuf.ByteString
        getCidBytes() {
      return instance.getCidBytes();
    }
    /**
     * <code>optional string cid = 1;</code>
     */
    public Builder setCid(
        java.lang.String value) {
      copyOnWrite();
      instance.setCid(value);
      return this;
    }
    /**
     * <code>optional string cid = 1;</code>
     */
    public Builder clearCid() {
      copyOnWrite();
      instance.clearCid();
      return this;
    }
    /**
     * <code>optional string cid = 1;</code>
     */
    public Builder setCidBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setCidBytes(value);
      return this;
    }

    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>optional .nakama.realtime.Channel channel = 2;</code>
     */
    public com.heroiclabs.nakama.rtapi.Channel getChannel() {
      return instance.getChannel();
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>optional .nakama.realtime.Channel channel = 2;</code>
     */
    public Builder setChannel(com.heroiclabs.nakama.rtapi.Channel value) {
      copyOnWrite();
      instance.setChannel(value);
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>optional .nakama.realtime.Channel channel = 2;</code>
     */
    public Builder setChannel(
        com.heroiclabs.nakama.rtapi.Channel.Builder builderForValue) {
      copyOnWrite();
      instance.setChannel(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>optional .nakama.realtime.Channel channel = 2;</code>
     */
    public Builder mergeChannel(com.heroiclabs.nakama.rtapi.Channel value) {
      copyOnWrite();
      instance.mergeChannel(value);
      return this;
    }
    /**
     * <pre>
     * A response from a channel join operation.
     * </pre>
     *
     * <code>optional .nakama.realtime.Channel channel = 2;</code>
     */
    public Builder clearChannel() {
      copyOnWrite();
      instance.clearChannel();
      return this;
    }

    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelJoin getChannelJoin() {
      return instance.getChannelJoin();
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
     */
    public Builder setChannelJoin(com.heroiclabs.nakama.rtapi.ChannelJoin value) {
      copyOnWrite();
      instance.setChannelJoin(value);
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
     */
    public Builder setChannelJoin(
        com.heroiclabs.nakama.rtapi.ChannelJoin.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelJoin(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
     */
    public Builder mergeChannelJoin(com.heroiclabs.nakama.rtapi.ChannelJoin value) {
      copyOnWrite();
      instance.mergeChannelJoin(value);
      return this;
    }
    /**
     * <pre>
     * Join a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelJoin channel_join = 3;</code>
     */
    public Builder clearChannelJoin() {
      copyOnWrite();
      instance.clearChannelJoin();
      return this;
    }

    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelLeave getChannelLeave() {
      return instance.getChannelLeave();
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
     */
    public Builder setChannelLeave(com.heroiclabs.nakama.rtapi.ChannelLeave value) {
      copyOnWrite();
      instance.setChannelLeave(value);
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
     */
    public Builder setChannelLeave(
        com.heroiclabs.nakama.rtapi.ChannelLeave.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelLeave(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
     */
    public Builder mergeChannelLeave(com.heroiclabs.nakama.rtapi.ChannelLeave value) {
      copyOnWrite();
      instance.mergeChannelLeave(value);
      return this;
    }
    /**
     * <pre>
     * Leave a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelLeave channel_leave = 4;</code>
     */
    public Builder clearChannelLeave() {
      copyOnWrite();
      instance.clearChannelLeave();
      return this;
    }

    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
     */
    public com.heroiclabs.nakama.api.ChannelMessage getChannelMessage() {
      return instance.getChannelMessage();
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
     */
    public Builder setChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
      copyOnWrite();
      instance.setChannelMessage(value);
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
     */
    public Builder setChannelMessage(
        com.heroiclabs.nakama.api.ChannelMessage.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelMessage(builderForValue);
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
     */
    public Builder mergeChannelMessage(com.heroiclabs.nakama.api.ChannelMessage value) {
      copyOnWrite();
      instance.mergeChannelMessage(value);
      return this;
    }
    /**
     * <pre>
     * An incoming message on a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.api.ChannelMessage channel_message = 5;</code>
     */
    public Builder clearChannelMessage() {
      copyOnWrite();
      instance.clearChannelMessage();
      return this;
    }

    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageAck getChannelMessageAck() {
      return instance.getChannelMessageAck();
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
     */
    public Builder setChannelMessageAck(com.heroiclabs.nakama.rtapi.ChannelMessageAck value) {
      copyOnWrite();
      instance.setChannelMessageAck(value);
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
     */
    public Builder setChannelMessageAck(
        com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelMessageAck(builderForValue);
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
     */
    public Builder mergeChannelMessageAck(com.heroiclabs.nakama.rtapi.ChannelMessageAck value) {
      copyOnWrite();
      instance.mergeChannelMessageAck(value);
      return this;
    }
    /**
     * <pre>
     * An acknowledgement received in response to sending a message on a chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageAck channel_message_ack = 6;</code>
     */
    public Builder clearChannelMessageAck() {
      copyOnWrite();
      instance.clearChannelMessageAck();
      return this;
    }

    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageSend getChannelMessageSend() {
      return instance.getChannelMessageSend();
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
     */
    public Builder setChannelMessageSend(com.heroiclabs.nakama.rtapi.ChannelMessageSend value) {
      copyOnWrite();
      instance.setChannelMessageSend(value);
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
     */
    public Builder setChannelMessageSend(
        com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelMessageSend(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
     */
    public Builder mergeChannelMessageSend(com.heroiclabs.nakama.rtapi.ChannelMessageSend value) {
      copyOnWrite();
      instance.mergeChannelMessageSend(value);
      return this;
    }
    /**
     * <pre>
     * Send a message to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageSend channel_message_send = 7;</code>
     */
    public Builder clearChannelMessageSend() {
      copyOnWrite();
      instance.clearChannelMessageSend();
      return this;
    }

    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageUpdate getChannelMessageUpdate() {
      return instance.getChannelMessageUpdate();
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
     */
    public Builder setChannelMessageUpdate(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate value) {
      copyOnWrite();
      instance.setChannelMessageUpdate(value);
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
     */
    public Builder setChannelMessageUpdate(
        com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelMessageUpdate(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
     */
    public Builder mergeChannelMessageUpdate(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate value) {
      copyOnWrite();
      instance.mergeChannelMessageUpdate(value);
      return this;
    }
    /**
     * <pre>
     * Update a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageUpdate channel_message_update = 8;</code>
     */
    public Builder clearChannelMessageUpdate() {
      copyOnWrite();
      instance.clearChannelMessageUpdate();
      return this;
    }

    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelMessageRemove getChannelMessageRemove() {
      return instance.getChannelMessageRemove();
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
     */
    public Builder setChannelMessageRemove(com.heroiclabs.nakama.rtapi.ChannelMessageRemove value) {
      copyOnWrite();
      instance.setChannelMessageRemove(value);
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
     */
    public Builder setChannelMessageRemove(
        com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelMessageRemove(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
     */
    public Builder mergeChannelMessageRemove(com.heroiclabs.nakama.rtapi.ChannelMessageRemove value) {
      copyOnWrite();
      instance.mergeChannelMessageRemove(value);
      return this;
    }
    /**
     * <pre>
     * Remove a message previously sent to a realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelMessageRemove channel_message_remove = 9;</code>
     */
    public Builder clearChannelMessageRemove() {
      copyOnWrite();
      instance.clearChannelMessageRemove();
      return this;
    }

    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
     */
    public com.heroiclabs.nakama.rtapi.ChannelPresenceEvent getChannelPresenceEvent() {
      return instance.getChannelPresenceEvent();
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
     */
    public Builder setChannelPresenceEvent(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent value) {
      copyOnWrite();
      instance.setChannelPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
     */
    public Builder setChannelPresenceEvent(
        com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder builderForValue) {
      copyOnWrite();
      instance.setChannelPresenceEvent(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
     */
    public Builder mergeChannelPresenceEvent(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent value) {
      copyOnWrite();
      instance.mergeChannelPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime chat channel.
     * </pre>
     *
     * <code>optional .nakama.realtime.ChannelPresenceEvent channel_presence_event = 10;</code>
     */
    public Builder clearChannelPresenceEvent() {
      copyOnWrite();
      instance.clearChannelPresenceEvent();
      return this;
    }

    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Error error = 11;</code>
     */
    public com.heroiclabs.nakama.rtapi.Error getError() {
      return instance.getError();
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Error error = 11;</code>
     */
    public Builder setError(com.heroiclabs.nakama.rtapi.Error value) {
      copyOnWrite();
      instance.setError(value);
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Error error = 11;</code>
     */
    public Builder setError(
        com.heroiclabs.nakama.rtapi.Error.Builder builderForValue) {
      copyOnWrite();
      instance.setError(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Error error = 11;</code>
     */
    public Builder mergeError(com.heroiclabs.nakama.rtapi.Error value) {
      copyOnWrite();
      instance.mergeError(value);
      return this;
    }
    /**
     * <pre>
     * Describes an error which occurred on the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Error error = 11;</code>
     */
    public Builder clearError() {
      copyOnWrite();
      instance.clearError();
      return this;
    }

    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.Match match = 12;</code>
     */
    public com.heroiclabs.nakama.rtapi.Match getMatch() {
      return instance.getMatch();
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.Match match = 12;</code>
     */
    public Builder setMatch(com.heroiclabs.nakama.rtapi.Match value) {
      copyOnWrite();
      instance.setMatch(value);
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.Match match = 12;</code>
     */
    public Builder setMatch(
        com.heroiclabs.nakama.rtapi.Match.Builder builderForValue) {
      copyOnWrite();
      instance.setMatch(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.Match match = 12;</code>
     */
    public Builder mergeMatch(com.heroiclabs.nakama.rtapi.Match value) {
      copyOnWrite();
      instance.mergeMatch(value);
      return this;
    }
    /**
     * <pre>
     * Incoming information about a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.Match match = 12;</code>
     */
    public Builder clearMatch() {
      copyOnWrite();
      instance.clearMatch();
      return this;
    }

    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchCreate getMatchCreate() {
      return instance.getMatchCreate();
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
     */
    public Builder setMatchCreate(com.heroiclabs.nakama.rtapi.MatchCreate value) {
      copyOnWrite();
      instance.setMatchCreate(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
     */
    public Builder setMatchCreate(
        com.heroiclabs.nakama.rtapi.MatchCreate.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchCreate(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
     */
    public Builder mergeMatchCreate(com.heroiclabs.nakama.rtapi.MatchCreate value) {
      copyOnWrite();
      instance.mergeMatchCreate(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to create a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchCreate match_create = 13;</code>
     */
    public Builder clearMatchCreate() {
      copyOnWrite();
      instance.clearMatchCreate();
      return this;
    }

    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchData getMatchData() {
      return instance.getMatchData();
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
     */
    public Builder setMatchData(com.heroiclabs.nakama.rtapi.MatchData value) {
      copyOnWrite();
      instance.setMatchData(value);
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
     */
    public Builder setMatchData(
        com.heroiclabs.nakama.rtapi.MatchData.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchData(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
     */
    public Builder mergeMatchData(com.heroiclabs.nakama.rtapi.MatchData value) {
      copyOnWrite();
      instance.mergeMatchData(value);
      return this;
    }
    /**
     * <pre>
     * Incoming realtime match data delivered from the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchData match_data = 14;</code>
     */
    public Builder clearMatchData() {
      copyOnWrite();
      instance.clearMatchData();
      return this;
    }

    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchDataSend getMatchDataSend() {
      return instance.getMatchDataSend();
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
     */
    public Builder setMatchDataSend(com.heroiclabs.nakama.rtapi.MatchDataSend value) {
      copyOnWrite();
      instance.setMatchDataSend(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
     */
    public Builder setMatchDataSend(
        com.heroiclabs.nakama.rtapi.MatchDataSend.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchDataSend(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
     */
    public Builder mergeMatchDataSend(com.heroiclabs.nakama.rtapi.MatchDataSend value) {
      copyOnWrite();
      instance.mergeMatchDataSend(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to send data to a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchDataSend match_data_send = 15;</code>
     */
    public Builder clearMatchDataSend() {
      copyOnWrite();
      instance.clearMatchDataSend();
      return this;
    }

    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchJoin getMatchJoin() {
      return instance.getMatchJoin();
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
     */
    public Builder setMatchJoin(com.heroiclabs.nakama.rtapi.MatchJoin value) {
      copyOnWrite();
      instance.setMatchJoin(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
     */
    public Builder setMatchJoin(
        com.heroiclabs.nakama.rtapi.MatchJoin.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchJoin(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
     */
    public Builder mergeMatchJoin(com.heroiclabs.nakama.rtapi.MatchJoin value) {
      copyOnWrite();
      instance.mergeMatchJoin(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to join a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchJoin match_join = 16;</code>
     */
    public Builder clearMatchJoin() {
      copyOnWrite();
      instance.clearMatchJoin();
      return this;
    }

    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchLeave getMatchLeave() {
      return instance.getMatchLeave();
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
     */
    public Builder setMatchLeave(com.heroiclabs.nakama.rtapi.MatchLeave value) {
      copyOnWrite();
      instance.setMatchLeave(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
     */
    public Builder setMatchLeave(
        com.heroiclabs.nakama.rtapi.MatchLeave.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchLeave(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
     */
    public Builder mergeMatchLeave(com.heroiclabs.nakama.rtapi.MatchLeave value) {
      copyOnWrite();
      instance.mergeMatchLeave(value);
      return this;
    }
    /**
     * <pre>
     * A client to server request to leave a realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchLeave match_leave = 17;</code>
     */
    public Builder clearMatchLeave() {
      copyOnWrite();
      instance.clearMatchLeave();
      return this;
    }

    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchPresenceEvent getMatchPresenceEvent() {
      return instance.getMatchPresenceEvent();
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
     */
    public Builder setMatchPresenceEvent(com.heroiclabs.nakama.rtapi.MatchPresenceEvent value) {
      copyOnWrite();
      instance.setMatchPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
     */
    public Builder setMatchPresenceEvent(
        com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchPresenceEvent(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
     */
    public Builder mergeMatchPresenceEvent(com.heroiclabs.nakama.rtapi.MatchPresenceEvent value) {
      copyOnWrite();
      instance.mergeMatchPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular realtime match.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchPresenceEvent match_presence_event = 18;</code>
     */
    public Builder clearMatchPresenceEvent() {
      copyOnWrite();
      instance.clearMatchPresenceEvent();
      return this;
    }

    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerAdd getMatchmakerAdd() {
      return instance.getMatchmakerAdd();
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
     */
    public Builder setMatchmakerAdd(com.heroiclabs.nakama.rtapi.MatchmakerAdd value) {
      copyOnWrite();
      instance.setMatchmakerAdd(value);
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
     */
    public Builder setMatchmakerAdd(
        com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchmakerAdd(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
     */
    public Builder mergeMatchmakerAdd(com.heroiclabs.nakama.rtapi.MatchmakerAdd value) {
      copyOnWrite();
      instance.mergeMatchmakerAdd(value);
      return this;
    }
    /**
     * <pre>
     * Submit a new matchmaking process request.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerAdd matchmaker_add = 19;</code>
     */
    public Builder clearMatchmakerAdd() {
      copyOnWrite();
      instance.clearMatchmakerAdd();
      return this;
    }

    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerMatched getMatchmakerMatched() {
      return instance.getMatchmakerMatched();
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
     */
    public Builder setMatchmakerMatched(com.heroiclabs.nakama.rtapi.MatchmakerMatched value) {
      copyOnWrite();
      instance.setMatchmakerMatched(value);
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
     */
    public Builder setMatchmakerMatched(
        com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchmakerMatched(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
     */
    public Builder mergeMatchmakerMatched(com.heroiclabs.nakama.rtapi.MatchmakerMatched value) {
      copyOnWrite();
      instance.mergeMatchmakerMatched(value);
      return this;
    }
    /**
     * <pre>
     * A successful matchmaking result.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerMatched matchmaker_matched = 20;</code>
     */
    public Builder clearMatchmakerMatched() {
      copyOnWrite();
      instance.clearMatchmakerMatched();
      return this;
    }

    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerRemove getMatchmakerRemove() {
      return instance.getMatchmakerRemove();
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
     */
    public Builder setMatchmakerRemove(com.heroiclabs.nakama.rtapi.MatchmakerRemove value) {
      copyOnWrite();
      instance.setMatchmakerRemove(value);
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
     */
    public Builder setMatchmakerRemove(
        com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchmakerRemove(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
     */
    public Builder mergeMatchmakerRemove(com.heroiclabs.nakama.rtapi.MatchmakerRemove value) {
      copyOnWrite();
      instance.mergeMatchmakerRemove(value);
      return this;
    }
    /**
     * <pre>
     * Cancel a matchmaking process using a ticket.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerRemove matchmaker_remove = 21;</code>
     */
    public Builder clearMatchmakerRemove() {
      copyOnWrite();
      instance.clearMatchmakerRemove();
      return this;
    }

    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
     */
    public com.heroiclabs.nakama.rtapi.MatchmakerTicket getMatchmakerTicket() {
      return instance.getMatchmakerTicket();
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
     */
    public Builder setMatchmakerTicket(com.heroiclabs.nakama.rtapi.MatchmakerTicket value) {
      copyOnWrite();
      instance.setMatchmakerTicket(value);
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
     */
    public Builder setMatchmakerTicket(
        com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder builderForValue) {
      copyOnWrite();
      instance.setMatchmakerTicket(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
     */
    public Builder mergeMatchmakerTicket(com.heroiclabs.nakama.rtapi.MatchmakerTicket value) {
      copyOnWrite();
      instance.mergeMatchmakerTicket(value);
      return this;
    }
    /**
     * <pre>
     * A response from starting a new matchmaking process.
     * </pre>
     *
     * <code>optional .nakama.realtime.MatchmakerTicket matchmaker_ticket = 22;</code>
     */
    public Builder clearMatchmakerTicket() {
      copyOnWrite();
      instance.clearMatchmakerTicket();
      return this;
    }

    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
     */
    public com.heroiclabs.nakama.rtapi.Notifications getNotifications() {
      return instance.getNotifications();
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
     */
    public Builder setNotifications(com.heroiclabs.nakama.rtapi.Notifications value) {
      copyOnWrite();
      instance.setNotifications(value);
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
     */
    public Builder setNotifications(
        com.heroiclabs.nakama.rtapi.Notifications.Builder builderForValue) {
      copyOnWrite();
      instance.setNotifications(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
     */
    public Builder mergeNotifications(com.heroiclabs.nakama.rtapi.Notifications value) {
      copyOnWrite();
      instance.mergeNotifications(value);
      return this;
    }
    /**
     * <pre>
     * Notifications send by the server.
     * </pre>
     *
     * <code>optional .nakama.realtime.Notifications notifications = 23;</code>
     */
    public Builder clearNotifications() {
      copyOnWrite();
      instance.clearNotifications();
      return this;
    }

    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>optional .nakama.api.Rpc rpc = 24;</code>
     */
    public com.heroiclabs.nakama.api.Rpc getRpc() {
      return instance.getRpc();
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>optional .nakama.api.Rpc rpc = 24;</code>
     */
    public Builder setRpc(com.heroiclabs.nakama.api.Rpc value) {
      copyOnWrite();
      instance.setRpc(value);
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>optional .nakama.api.Rpc rpc = 24;</code>
     */
    public Builder setRpc(
        com.heroiclabs.nakama.api.Rpc.Builder builderForValue) {
      copyOnWrite();
      instance.setRpc(builderForValue);
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>optional .nakama.api.Rpc rpc = 24;</code>
     */
    public Builder mergeRpc(com.heroiclabs.nakama.api.Rpc value) {
      copyOnWrite();
      instance.mergeRpc(value);
      return this;
    }
    /**
     * <pre>
     * RPC call or response.
     * </pre>
     *
     * <code>optional .nakama.api.Rpc rpc = 24;</code>
     */
    public Builder clearRpc() {
      copyOnWrite();
      instance.clearRpc();
      return this;
    }

    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>optional .nakama.realtime.Status status = 25;</code>
     */
    public com.heroiclabs.nakama.rtapi.Status getStatus() {
      return instance.getStatus();
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>optional .nakama.realtime.Status status = 25;</code>
     */
    public Builder setStatus(com.heroiclabs.nakama.rtapi.Status value) {
      copyOnWrite();
      instance.setStatus(value);
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>optional .nakama.realtime.Status status = 25;</code>
     */
    public Builder setStatus(
        com.heroiclabs.nakama.rtapi.Status.Builder builderForValue) {
      copyOnWrite();
      instance.setStatus(builderForValue);
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>optional .nakama.realtime.Status status = 25;</code>
     */
    public Builder mergeStatus(com.heroiclabs.nakama.rtapi.Status value) {
      copyOnWrite();
      instance.mergeStatus(value);
      return this;
    }
    /**
     * <pre>
     * An incoming status snapshot for some set of users.
     * </pre>
     *
     * <code>optional .nakama.realtime.Status status = 25;</code>
     */
    public Builder clearStatus() {
      copyOnWrite();
      instance.clearStatus();
      return this;
    }

    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusFollow getStatusFollow() {
      return instance.getStatusFollow();
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
     */
    public Builder setStatusFollow(com.heroiclabs.nakama.rtapi.StatusFollow value) {
      copyOnWrite();
      instance.setStatusFollow(value);
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
     */
    public Builder setStatusFollow(
        com.heroiclabs.nakama.rtapi.StatusFollow.Builder builderForValue) {
      copyOnWrite();
      instance.setStatusFollow(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
     */
    public Builder mergeStatusFollow(com.heroiclabs.nakama.rtapi.StatusFollow value) {
      copyOnWrite();
      instance.mergeStatusFollow(value);
      return this;
    }
    /**
     * <pre>
     * Start following some set of users to receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusFollow status_follow = 26;</code>
     */
    public Builder clearStatusFollow() {
      copyOnWrite();
      instance.clearStatusFollow();
      return this;
    }

    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusPresenceEvent getStatusPresenceEvent() {
      return instance.getStatusPresenceEvent();
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
     */
    public Builder setStatusPresenceEvent(com.heroiclabs.nakama.rtapi.StatusPresenceEvent value) {
      copyOnWrite();
      instance.setStatusPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
     */
    public Builder setStatusPresenceEvent(
        com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder builderForValue) {
      copyOnWrite();
      instance.setStatusPresenceEvent(builderForValue);
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
     */
    public Builder mergeStatusPresenceEvent(com.heroiclabs.nakama.rtapi.StatusPresenceEvent value) {
      copyOnWrite();
      instance.mergeStatusPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * An incoming status update.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusPresenceEvent status_presence_event = 27;</code>
     */
    public Builder clearStatusPresenceEvent() {
      copyOnWrite();
      instance.clearStatusPresenceEvent();
      return this;
    }

    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusUnfollow getStatusUnfollow() {
      return instance.getStatusUnfollow();
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
     */
    public Builder setStatusUnfollow(com.heroiclabs.nakama.rtapi.StatusUnfollow value) {
      copyOnWrite();
      instance.setStatusUnfollow(value);
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
     */
    public Builder setStatusUnfollow(
        com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder builderForValue) {
      copyOnWrite();
      instance.setStatusUnfollow(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
     */
    public Builder mergeStatusUnfollow(com.heroiclabs.nakama.rtapi.StatusUnfollow value) {
      copyOnWrite();
      instance.mergeStatusUnfollow(value);
      return this;
    }
    /**
     * <pre>
     * Stop following some set of users to no longer receive their status updates.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUnfollow status_unfollow = 28;</code>
     */
    public Builder clearStatusUnfollow() {
      copyOnWrite();
      instance.clearStatusUnfollow();
      return this;
    }

    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
     */
    public com.heroiclabs.nakama.rtapi.StatusUpdate getStatusUpdate() {
      return instance.getStatusUpdate();
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
     */
    public Builder setStatusUpdate(com.heroiclabs.nakama.rtapi.StatusUpdate value) {
      copyOnWrite();
      instance.setStatusUpdate(value);
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
     */
    public Builder setStatusUpdate(
        com.heroiclabs.nakama.rtapi.StatusUpdate.Builder builderForValue) {
      copyOnWrite();
      instance.setStatusUpdate(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
     */
    public Builder mergeStatusUpdate(com.heroiclabs.nakama.rtapi.StatusUpdate value) {
      copyOnWrite();
      instance.mergeStatusUpdate(value);
      return this;
    }
    /**
     * <pre>
     * Set the user's own status.
     * </pre>
     *
     * <code>optional .nakama.realtime.StatusUpdate status_update = 29;</code>
     */
    public Builder clearStatusUpdate() {
      copyOnWrite();
      instance.clearStatusUpdate();
      return this;
    }

    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
     */
    public com.heroiclabs.nakama.rtapi.StreamData getStreamData() {
      return instance.getStreamData();
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
     */
    public Builder setStreamData(com.heroiclabs.nakama.rtapi.StreamData value) {
      copyOnWrite();
      instance.setStreamData(value);
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
     */
    public Builder setStreamData(
        com.heroiclabs.nakama.rtapi.StreamData.Builder builderForValue) {
      copyOnWrite();
      instance.setStreamData(builderForValue);
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
     */
    public Builder mergeStreamData(com.heroiclabs.nakama.rtapi.StreamData value) {
      copyOnWrite();
      instance.mergeStreamData(value);
      return this;
    }
    /**
     * <pre>
     * A data message delivered over a stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamData stream_data = 30;</code>
     */
    public Builder clearStreamData() {
      copyOnWrite();
      instance.clearStreamData();
      return this;
    }

    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
     */
    public com.heroiclabs.nakama.rtapi.StreamPresenceEvent getStreamPresenceEvent() {
      return instance.getStreamPresenceEvent();
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
     */
    public Builder setStreamPresenceEvent(com.heroiclabs.nakama.rtapi.StreamPresenceEvent value) {
      copyOnWrite();
      instance.setStreamPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
     */
    public Builder setStreamPresenceEvent(
        com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder builderForValue) {
      copyOnWrite();
      instance.setStreamPresenceEvent(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
     */
    public Builder mergeStreamPresenceEvent(com.heroiclabs.nakama.rtapi.StreamPresenceEvent value) {
      copyOnWrite();
      instance.mergeStreamPresenceEvent(value);
      return this;
    }
    /**
     * <pre>
     * Presence update for a particular stream.
     * </pre>
     *
     * <code>optional .nakama.realtime.StreamPresenceEvent stream_presence_event = 31;</code>
     */
    public Builder clearStreamPresenceEvent() {
      copyOnWrite();
      instance.clearStreamPresenceEvent();
      return this;
    }

    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>optional .nakama.realtime.Ping ping = 32;</code>
     */
    public com.heroiclabs.nakama.rtapi.Ping getPing() {
      return instance.getPing();
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>optional .nakama.realtime.Ping ping = 32;</code>
     */
    public Builder setPing(com.heroiclabs.nakama.rtapi.Ping value) {
      copyOnWrite();
      instance.setPing(value);
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>optional .nakama.realtime.Ping ping = 32;</code>
     */
    public Builder setPing(
        com.heroiclabs.nakama.rtapi.Ping.Builder builderForValue) {
      copyOnWrite();
      instance.setPing(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>optional .nakama.realtime.Ping ping = 32;</code>
     */
    public Builder mergePing(com.heroiclabs.nakama.rtapi.Ping value) {
      copyOnWrite();
      instance.mergePing(value);
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check.
     * </pre>
     *
     * <code>optional .nakama.realtime.Ping ping = 32;</code>
     */
    public Builder clearPing() {
      copyOnWrite();
      instance.clearPing();
      return this;
    }

    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>optional .nakama.realtime.Pong pong = 33;</code>
     */
    public com.heroiclabs.nakama.rtapi.Pong getPong() {
      return instance.getPong();
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>optional .nakama.realtime.Pong pong = 33;</code>
     */
    public Builder setPong(com.heroiclabs.nakama.rtapi.Pong value) {
      copyOnWrite();
      instance.setPong(value);
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>optional .nakama.realtime.Pong pong = 33;</code>
     */
    public Builder setPong(
        com.heroiclabs.nakama.rtapi.Pong.Builder builderForValue) {
      copyOnWrite();
      instance.setPong(builderForValue);
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>optional .nakama.realtime.Pong pong = 33;</code>
     */
    public Builder mergePong(com.heroiclabs.nakama.rtapi.Pong value) {
      copyOnWrite();
      instance.mergePong(value);
      return this;
    }
    /**
     * <pre>
     * Application-level heartbeat and connection check response.
     * </pre>
     *
     * <code>optional .nakama.realtime.Pong pong = 33;</code>
     */
    public Builder clearPong() {
      copyOnWrite();
      instance.clearPong();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.Envelope)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.Envelope();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.Envelope other = (com.heroiclabs.nakama.rtapi.Envelope) arg1;
        cid_ = visitor.visitString(!cid_.isEmpty(), cid_,
            !other.cid_.isEmpty(), other.cid_);
        switch (other.getMessageCase()) {
          case CHANNEL: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 2,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_JOIN: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 3,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_LEAVE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 4,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_MESSAGE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 5,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_MESSAGE_ACK: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 6,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_MESSAGE_SEND: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 7,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_MESSAGE_UPDATE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 8,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_MESSAGE_REMOVE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 9,
                message_,
                other.message_);
            break;
          }
          case CHANNEL_PRESENCE_EVENT: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 10,
                message_,
                other.message_);
            break;
          }
          case ERROR: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 11,
                message_,
                other.message_);
            break;
          }
          case MATCH: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 12,
                message_,
                other.message_);
            break;
          }
          case MATCH_CREATE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 13,
                message_,
                other.message_);
            break;
          }
          case MATCH_DATA: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 14,
                message_,
                other.message_);
            break;
          }
          case MATCH_DATA_SEND: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 15,
                message_,
                other.message_);
            break;
          }
          case MATCH_JOIN: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 16,
                message_,
                other.message_);
            break;
          }
          case MATCH_LEAVE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 17,
                message_,
                other.message_);
            break;
          }
          case MATCH_PRESENCE_EVENT: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 18,
                message_,
                other.message_);
            break;
          }
          case MATCHMAKER_ADD: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 19,
                message_,
                other.message_);
            break;
          }
          case MATCHMAKER_MATCHED: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 20,
                message_,
                other.message_);
            break;
          }
          case MATCHMAKER_REMOVE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 21,
                message_,
                other.message_);
            break;
          }
          case MATCHMAKER_TICKET: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 22,
                message_,
                other.message_);
            break;
          }
          case NOTIFICATIONS: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 23,
                message_,
                other.message_);
            break;
          }
          case RPC: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 24,
                message_,
                other.message_);
            break;
          }
          case STATUS: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 25,
                message_,
                other.message_);
            break;
          }
          case STATUS_FOLLOW: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 26,
                message_,
                other.message_);
            break;
          }
          case STATUS_PRESENCE_EVENT: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 27,
                message_,
                other.message_);
            break;
          }
          case STATUS_UNFOLLOW: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 28,
                message_,
                other.message_);
            break;
          }
          case STATUS_UPDATE: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 29,
                message_,
                other.message_);
            break;
          }
          case STREAM_DATA: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 30,
                message_,
                other.message_);
            break;
          }
          case STREAM_PRESENCE_EVENT: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 31,
                message_,
                other.message_);
            break;
          }
          case PING: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 32,
                message_,
                other.message_);
            break;
          }
          case PONG: {
            message_ = visitor.visitOneofMessage(
                messageCase_ == 33,
                message_,
                other.message_);
            break;
          }
          case MESSAGE_NOT_SET: {
            visitor.visitOneofNotSet(messageCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.messageCase_ != 0) {
            messageCase_ = other.messageCase_;
          }
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();

                cid_ = s;
                break;
              }
              case 18: {
                com.heroiclabs.nakama.rtapi.Channel.Builder subBuilder = null;
                if (messageCase_ == 2) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Channel) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Channel.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Channel) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 2;
                break;
              }
              case 26: {
                com.heroiclabs.nakama.rtapi.ChannelJoin.Builder subBuilder = null;
                if (messageCase_ == 3) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelJoin) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelJoin.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelJoin) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 3;
                break;
              }
              case 34: {
                com.heroiclabs.nakama.rtapi.ChannelLeave.Builder subBuilder = null;
                if (messageCase_ == 4) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelLeave) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelLeave.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelLeave) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 4;
                break;
              }
              case 42: {
                com.heroiclabs.nakama.api.ChannelMessage.Builder subBuilder = null;
                if (messageCase_ == 5) {
                  subBuilder = ((com.heroiclabs.nakama.api.ChannelMessage) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.api.ChannelMessage.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.api.ChannelMessage) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 5;
                break;
              }
              case 50: {
                com.heroiclabs.nakama.rtapi.ChannelMessageAck.Builder subBuilder = null;
                if (messageCase_ == 6) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelMessageAck.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelMessageAck) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 6;
                break;
              }
              case 58: {
                com.heroiclabs.nakama.rtapi.ChannelMessageSend.Builder subBuilder = null;
                if (messageCase_ == 7) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelMessageSend.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelMessageSend) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 7;
                break;
              }
              case 66: {
                com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.Builder subBuilder = null;
                if (messageCase_ == 8) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelMessageUpdate.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelMessageUpdate) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 8;
                break;
              }
              case 74: {
                com.heroiclabs.nakama.rtapi.ChannelMessageRemove.Builder subBuilder = null;
                if (messageCase_ == 9) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelMessageRemove.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelMessageRemove) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 9;
                break;
              }
              case 82: {
                com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.Builder subBuilder = null;
                if (messageCase_ == 10) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.ChannelPresenceEvent.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.ChannelPresenceEvent) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 10;
                break;
              }
              case 90: {
                com.heroiclabs.nakama.rtapi.Error.Builder subBuilder = null;
                if (messageCase_ == 11) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Error) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Error.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Error) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 11;
                break;
              }
              case 98: {
                com.heroiclabs.nakama.rtapi.Match.Builder subBuilder = null;
                if (messageCase_ == 12) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Match) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Match.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Match) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 12;
                break;
              }
              case 106: {
                com.heroiclabs.nakama.rtapi.MatchCreate.Builder subBuilder = null;
                if (messageCase_ == 13) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchCreate) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchCreate.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchCreate) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 13;
                break;
              }
              case 114: {
                com.heroiclabs.nakama.rtapi.MatchData.Builder subBuilder = null;
                if (messageCase_ == 14) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchData) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchData) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 14;
                break;
              }
              case 122: {
                com.heroiclabs.nakama.rtapi.MatchDataSend.Builder subBuilder = null;
                if (messageCase_ == 15) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchDataSend) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchDataSend.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchDataSend) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 15;
                break;
              }
              case 130: {
                com.heroiclabs.nakama.rtapi.MatchJoin.Builder subBuilder = null;
                if (messageCase_ == 16) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchJoin) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchJoin.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchJoin) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 16;
                break;
              }
              case 138: {
                com.heroiclabs.nakama.rtapi.MatchLeave.Builder subBuilder = null;
                if (messageCase_ == 17) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchLeave) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchLeave.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchLeave) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 17;
                break;
              }
              case 146: {
                com.heroiclabs.nakama.rtapi.MatchPresenceEvent.Builder subBuilder = null;
                if (messageCase_ == 18) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchPresenceEvent.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchPresenceEvent) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 18;
                break;
              }
              case 154: {
                com.heroiclabs.nakama.rtapi.MatchmakerAdd.Builder subBuilder = null;
                if (messageCase_ == 19) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchmakerAdd.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchmakerAdd) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 19;
                break;
              }
              case 162: {
                com.heroiclabs.nakama.rtapi.MatchmakerMatched.Builder subBuilder = null;
                if (messageCase_ == 20) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchmakerMatched.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchmakerMatched) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 20;
                break;
              }
              case 170: {
                com.heroiclabs.nakama.rtapi.MatchmakerRemove.Builder subBuilder = null;
                if (messageCase_ == 21) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchmakerRemove.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchmakerRemove) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 21;
                break;
              }
              case 178: {
                com.heroiclabs.nakama.rtapi.MatchmakerTicket.Builder subBuilder = null;
                if (messageCase_ == 22) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.MatchmakerTicket.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.MatchmakerTicket) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 22;
                break;
              }
              case 186: {
                com.heroiclabs.nakama.rtapi.Notifications.Builder subBuilder = null;
                if (messageCase_ == 23) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Notifications) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Notifications.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Notifications) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 23;
                break;
              }
              case 194: {
                com.heroiclabs.nakama.api.Rpc.Builder subBuilder = null;
                if (messageCase_ == 24) {
                  subBuilder = ((com.heroiclabs.nakama.api.Rpc) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.api.Rpc.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.api.Rpc) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 24;
                break;
              }
              case 202: {
                com.heroiclabs.nakama.rtapi.Status.Builder subBuilder = null;
                if (messageCase_ == 25) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Status) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Status.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Status) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 25;
                break;
              }
              case 210: {
                com.heroiclabs.nakama.rtapi.StatusFollow.Builder subBuilder = null;
                if (messageCase_ == 26) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.StatusFollow) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.StatusFollow.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.StatusFollow) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 26;
                break;
              }
              case 218: {
                com.heroiclabs.nakama.rtapi.StatusPresenceEvent.Builder subBuilder = null;
                if (messageCase_ == 27) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.StatusPresenceEvent.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.StatusPresenceEvent) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 27;
                break;
              }
              case 226: {
                com.heroiclabs.nakama.rtapi.StatusUnfollow.Builder subBuilder = null;
                if (messageCase_ == 28) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.StatusUnfollow) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.StatusUnfollow.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.StatusUnfollow) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 28;
                break;
              }
              case 234: {
                com.heroiclabs.nakama.rtapi.StatusUpdate.Builder subBuilder = null;
                if (messageCase_ == 29) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.StatusUpdate) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.StatusUpdate.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.StatusUpdate) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 29;
                break;
              }
              case 242: {
                com.heroiclabs.nakama.rtapi.StreamData.Builder subBuilder = null;
                if (messageCase_ == 30) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.StreamData) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.StreamData.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.StreamData) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 30;
                break;
              }
              case 250: {
                com.heroiclabs.nakama.rtapi.StreamPresenceEvent.Builder subBuilder = null;
                if (messageCase_ == 31) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.StreamPresenceEvent.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.StreamPresenceEvent) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 31;
                break;
              }
              case 258: {
                com.heroiclabs.nakama.rtapi.Ping.Builder subBuilder = null;
                if (messageCase_ == 32) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Ping) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Ping.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Ping) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 32;
                break;
              }
              case 266: {
                com.heroiclabs.nakama.rtapi.Pong.Builder subBuilder = null;
                if (messageCase_ == 33) {
                  subBuilder = ((com.heroiclabs.nakama.rtapi.Pong) message_).toBuilder();
                }
                message_ =
                     input.readMessage(com.heroiclabs.nakama.rtapi.Pong.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom((com.heroiclabs.nakama.rtapi.Pong) message_);
                  message_ = subBuilder.buildPartial();
                }
                messageCase_ = 33;
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.Envelope.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.Envelope)
  private static final com.heroiclabs.nakama.rtapi.Envelope DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new Envelope();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.Envelope getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<Envelope> PARSER;

  public static com.google.protobuf.Parser<Envelope> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

