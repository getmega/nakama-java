// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * Join an existing realtime match.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.MatchJoin}
 */
public  final class MatchJoin extends
    com.google.protobuf.GeneratedMessageLite<
        MatchJoin, MatchJoin.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.MatchJoin)
    MatchJoinOrBuilder {
  private MatchJoin() {
  }
  private int bitField0_;
  private int idCase_ = 0;
  private java.lang.Object id_;
  public enum IdCase
      implements com.google.protobuf.Internal.EnumLite {
    MATCH_ID(1),
    TOKEN(2),
    ID_NOT_SET(0);
    private final int value;
    private IdCase(int value) {
      this.value = value;
    }
    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IdCase valueOf(int value) {
      return forNumber(value);
    }

    public static IdCase forNumber(int value) {
      switch (value) {
        case 1: return MATCH_ID;
        case 2: return TOKEN;
        case 0: return ID_NOT_SET;
        default: return null;
      }
    }
    public int getNumber() {
      return this.value;
    }
  };

  public IdCase
  getIdCase() {
    return IdCase.forNumber(
        idCase_);
  }

  private void clearId() {
    idCase_ = 0;
    id_ = null;
  }

  public static final int MATCH_ID_FIELD_NUMBER = 1;
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>optional string match_id = 1;</code>
   */
  public java.lang.String getMatchId() {
    java.lang.String ref = "";
    if (idCase_ == 1) {
      ref = (java.lang.String) id_;
    }
    return ref;
  }
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>optional string match_id = 1;</code>
   */
  public com.google.protobuf.ByteString
      getMatchIdBytes() {
    java.lang.String ref = "";
    if (idCase_ == 1) {
      ref = (java.lang.String) id_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>optional string match_id = 1;</code>
   */
  private void setMatchId(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  idCase_ = 1;
    id_ = value;
  }
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>optional string match_id = 1;</code>
   */
  private void clearMatchId() {
    if (idCase_ == 1) {
      idCase_ = 0;
      id_ = null;
    }
  }
  /**
   * <pre>
   * The match unique ID.
   * </pre>
   *
   * <code>optional string match_id = 1;</code>
   */
  private void setMatchIdBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    idCase_ = 1;
    id_ = value.toStringUtf8();
  }

  public static final int TOKEN_FIELD_NUMBER = 2;
  /**
   * <pre>
   * A matchmaking result token.
   * </pre>
   *
   * <code>optional string token = 2;</code>
   */
  public java.lang.String getToken() {
    java.lang.String ref = "";
    if (idCase_ == 2) {
      ref = (java.lang.String) id_;
    }
    return ref;
  }
  /**
   * <pre>
   * A matchmaking result token.
   * </pre>
   *
   * <code>optional string token = 2;</code>
   */
  public com.google.protobuf.ByteString
      getTokenBytes() {
    java.lang.String ref = "";
    if (idCase_ == 2) {
      ref = (java.lang.String) id_;
    }
    return com.google.protobuf.ByteString.copyFromUtf8(ref);
  }
  /**
   * <pre>
   * A matchmaking result token.
   * </pre>
   *
   * <code>optional string token = 2;</code>
   */
  private void setToken(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  idCase_ = 2;
    id_ = value;
  }
  /**
   * <pre>
   * A matchmaking result token.
   * </pre>
   *
   * <code>optional string token = 2;</code>
   */
  private void clearToken() {
    if (idCase_ == 2) {
      idCase_ = 0;
      id_ = null;
    }
  }
  /**
   * <pre>
   * A matchmaking result token.
   * </pre>
   *
   * <code>optional string token = 2;</code>
   */
  private void setTokenBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    idCase_ = 2;
    id_ = value.toStringUtf8();
  }

  public static final int METADATA_FIELD_NUMBER = 3;
  private static final class MetadataDefaultEntryHolder {
    static final com.google.protobuf.MapEntryLite<
        java.lang.String, java.lang.String> defaultEntry =
            com.google.protobuf.MapEntryLite
            .<java.lang.String, java.lang.String>newDefaultInstance(
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.STRING,
                "");
  }
  private com.google.protobuf.MapFieldLite<
      java.lang.String, java.lang.String> metadata_ =
          com.google.protobuf.MapFieldLite.emptyMapField();
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetMetadata() {
    return metadata_;
  }
  private com.google.protobuf.MapFieldLite<java.lang.String, java.lang.String>
  internalGetMutableMetadata() {
    if (!metadata_.isMutable()) {
      metadata_ = metadata_.mutableCopy();
    }
    return metadata_;
  }

  public int getMetadataCount() {
    return internalGetMetadata().size();
  }
  /**
   * <pre>
   * An optional set of key-value metadata pairs to be passed to the match handler, if any.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 3;</code>
   */

  public boolean containsMetadata(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    return internalGetMetadata().containsKey(key);
  }
  /**
   * Use {@link #getMetadataMap()} instead.
   */
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
    return getMetadataMap();
  }
  /**
   * <pre>
   * An optional set of key-value metadata pairs to be passed to the match handler, if any.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 3;</code>
   */

  public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
    return java.util.Collections.unmodifiableMap(
        internalGetMetadata());
  }
  /**
   * <pre>
   * An optional set of key-value metadata pairs to be passed to the match handler, if any.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 3;</code>
   */

  public java.lang.String getMetadataOrDefault(
      java.lang.String key,
      java.lang.String defaultValue) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetMetadata();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * An optional set of key-value metadata pairs to be passed to the match handler, if any.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 3;</code>
   */

  public java.lang.String getMetadataOrThrow(
      java.lang.String key) {
    if (key == null) { throw new java.lang.NullPointerException(); }
    java.util.Map<java.lang.String, java.lang.String> map =
        internalGetMetadata();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }
  /**
   * <pre>
   * An optional set of key-value metadata pairs to be passed to the match handler, if any.
   * </pre>
   *
   * <code>map&lt;string, string&gt; metadata = 3;</code>
   */
  private java.util.Map<java.lang.String, java.lang.String>
  getMutableMetadataMap() {
    return internalGetMutableMetadata();
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (idCase_ == 1) {
      output.writeString(1, getMatchId());
    }
    if (idCase_ == 2) {
      output.writeString(2, getToken());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetMetadata().entrySet()) {
      MetadataDefaultEntryHolder.defaultEntry.serializeTo(
          output, 3, entry.getKey(), entry.getValue());
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (idCase_ == 1) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(1, getMatchId());
    }
    if (idCase_ == 2) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(2, getToken());
    }
    for (java.util.Map.Entry<java.lang.String, java.lang.String> entry
         : internalGetMetadata().entrySet()) {
      size += MetadataDefaultEntryHolder.defaultEntry.computeMessageSize(
        3, entry.getKey(), entry.getValue());
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.MatchJoin parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.MatchJoin prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * Join an existing realtime match.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.MatchJoin}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.MatchJoin, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.MatchJoin)
      com.heroiclabs.nakama.rtapi.MatchJoinOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.MatchJoin.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }

    public IdCase
        getIdCase() {
      return instance.getIdCase();
    }

    public Builder clearId() {
      copyOnWrite();
      instance.clearId();
      return this;
    }


    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>optional string match_id = 1;</code>
     */
    public java.lang.String getMatchId() {
      return instance.getMatchId();
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>optional string match_id = 1;</code>
     */
    public com.google.protobuf.ByteString
        getMatchIdBytes() {
      return instance.getMatchIdBytes();
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>optional string match_id = 1;</code>
     */
    public Builder setMatchId(
        java.lang.String value) {
      copyOnWrite();
      instance.setMatchId(value);
      return this;
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>optional string match_id = 1;</code>
     */
    public Builder clearMatchId() {
      copyOnWrite();
      instance.clearMatchId();
      return this;
    }
    /**
     * <pre>
     * The match unique ID.
     * </pre>
     *
     * <code>optional string match_id = 1;</code>
     */
    public Builder setMatchIdBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setMatchIdBytes(value);
      return this;
    }

    /**
     * <pre>
     * A matchmaking result token.
     * </pre>
     *
     * <code>optional string token = 2;</code>
     */
    public java.lang.String getToken() {
      return instance.getToken();
    }
    /**
     * <pre>
     * A matchmaking result token.
     * </pre>
     *
     * <code>optional string token = 2;</code>
     */
    public com.google.protobuf.ByteString
        getTokenBytes() {
      return instance.getTokenBytes();
    }
    /**
     * <pre>
     * A matchmaking result token.
     * </pre>
     *
     * <code>optional string token = 2;</code>
     */
    public Builder setToken(
        java.lang.String value) {
      copyOnWrite();
      instance.setToken(value);
      return this;
    }
    /**
     * <pre>
     * A matchmaking result token.
     * </pre>
     *
     * <code>optional string token = 2;</code>
     */
    public Builder clearToken() {
      copyOnWrite();
      instance.clearToken();
      return this;
    }
    /**
     * <pre>
     * A matchmaking result token.
     * </pre>
     *
     * <code>optional string token = 2;</code>
     */
    public Builder setTokenBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setTokenBytes(value);
      return this;
    }


    public int getMetadataCount() {
      return instance.getMetadataMap().size();
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */

    public boolean containsMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      return instance.getMetadataMap().containsKey(key);
    }

    public Builder clearMetadata() {
      copyOnWrite();
      instance.getMutableMetadataMap().clear();
      return this;
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */

    public Builder removeMetadata(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      copyOnWrite();
      instance.getMutableMetadataMap().remove(key);
      return this;
    }
    /**
     * Use {@link #getMetadataMap()} instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
      return getMetadataMap();
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    public java.util.Map<java.lang.String, java.lang.String> getMetadataMap() {
      return java.util.Collections.unmodifiableMap(
          instance.getMetadataMap());
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */

    public java.lang.String getMetadataOrDefault(
        java.lang.String key,
        java.lang.String defaultValue) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getMetadataMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */

    public java.lang.String getMetadataOrThrow(
        java.lang.String key) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      java.util.Map<java.lang.String, java.lang.String> map =
          instance.getMetadataMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    public Builder putMetadata(
        java.lang.String key,
        java.lang.String value) {
      if (key == null) { throw new java.lang.NullPointerException(); }
      if (value == null) { throw new java.lang.NullPointerException(); }
      copyOnWrite();
      instance.getMutableMetadataMap().put(key, value);
      return this;
    }
    /**
     * <pre>
     * An optional set of key-value metadata pairs to be passed to the match handler, if any.
     * </pre>
     *
     * <code>map&lt;string, string&gt; metadata = 3;</code>
     */
    public Builder putAllMetadata(
        java.util.Map<java.lang.String, java.lang.String> values) {
      copyOnWrite();
      instance.getMutableMetadataMap().putAll(values);
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.MatchJoin)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.MatchJoin();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        metadata_.makeImmutable();
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.MatchJoin other = (com.heroiclabs.nakama.rtapi.MatchJoin) arg1;
        metadata_ = visitor.visitMap(
            metadata_, other.internalGetMetadata());
        switch (other.getIdCase()) {
          case MATCH_ID: {
            id_ = visitor.visitOneofString(
               idCase_ == 1, id_, other.id_);
            break;
          }
          case TOKEN: {
            id_ = visitor.visitOneofString(
               idCase_ == 2, id_, other.id_);
            break;
          }
          case ID_NOT_SET: {
            visitor.visitOneofNotSet(idCase_ != 0);
            break;
          }
        }
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
          if (other.idCase_ != 0) {
            idCase_ = other.idCase_;
          }
          bitField0_ |= other.bitField0_;
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                String s = input.readStringRequireUtf8();
                idCase_ = 1;
                id_ = s;
                break;
              }
              case 18: {
                String s = input.readStringRequireUtf8();
                idCase_ = 2;
                id_ = s;
                break;
              }
              case 26: {
                if (!metadata_.isMutable()) {
                  metadata_ = metadata_.mutableCopy();
                }
                MetadataDefaultEntryHolder.defaultEntry.parseInto(metadata_, input, extensionRegistry);  break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.MatchJoin.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.MatchJoin)
  private static final com.heroiclabs.nakama.rtapi.MatchJoin DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MatchJoin();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.MatchJoin getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<MatchJoin> PARSER;

  public static com.google.protobuf.Parser<MatchJoin> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

