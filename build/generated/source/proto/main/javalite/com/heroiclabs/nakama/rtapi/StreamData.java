// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: github.com/heroiclabs/nakama-common/api/realtime.proto

package com.heroiclabs.nakama.rtapi;

/**
 * <pre>
 * A data message delivered over a stream.
 * </pre>
 *
 * Protobuf type {@code nakama.realtime.StreamData}
 */
public  final class StreamData extends
    com.google.protobuf.GeneratedMessageLite<
        StreamData, StreamData.Builder> implements
    // @@protoc_insertion_point(message_implements:nakama.realtime.StreamData)
    StreamDataOrBuilder {
  private StreamData() {
    data_ = "";
  }
  public static final int STREAM_FIELD_NUMBER = 1;
  private com.heroiclabs.nakama.rtapi.Stream stream_;
  /**
   * <pre>
   * The stream this data message relates to.
   * </pre>
   *
   * <code>optional .nakama.realtime.Stream stream = 1;</code>
   */
  public boolean hasStream() {
    return stream_ != null;
  }
  /**
   * <pre>
   * The stream this data message relates to.
   * </pre>
   *
   * <code>optional .nakama.realtime.Stream stream = 1;</code>
   */
  public com.heroiclabs.nakama.rtapi.Stream getStream() {
    return stream_ == null ? com.heroiclabs.nakama.rtapi.Stream.getDefaultInstance() : stream_;
  }
  /**
   * <pre>
   * The stream this data message relates to.
   * </pre>
   *
   * <code>optional .nakama.realtime.Stream stream = 1;</code>
   */
  private void setStream(com.heroiclabs.nakama.rtapi.Stream value) {
    if (value == null) {
      throw new NullPointerException();
    }
    stream_ = value;
    
    }
  /**
   * <pre>
   * The stream this data message relates to.
   * </pre>
   *
   * <code>optional .nakama.realtime.Stream stream = 1;</code>
   */
  private void setStream(
      com.heroiclabs.nakama.rtapi.Stream.Builder builderForValue) {
    stream_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * The stream this data message relates to.
   * </pre>
   *
   * <code>optional .nakama.realtime.Stream stream = 1;</code>
   */
  private void mergeStream(com.heroiclabs.nakama.rtapi.Stream value) {
    if (stream_ != null &&
        stream_ != com.heroiclabs.nakama.rtapi.Stream.getDefaultInstance()) {
      stream_ =
        com.heroiclabs.nakama.rtapi.Stream.newBuilder(stream_).mergeFrom(value).buildPartial();
    } else {
      stream_ = value;
    }
    
  }
  /**
   * <pre>
   * The stream this data message relates to.
   * </pre>
   *
   * <code>optional .nakama.realtime.Stream stream = 1;</code>
   */
  private void clearStream() {  stream_ = null;
    
  }

  public static final int SENDER_FIELD_NUMBER = 2;
  private com.heroiclabs.nakama.rtapi.UserPresence sender_;
  /**
   * <pre>
   * The sender, if any.
   * </pre>
   *
   * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
   */
  public boolean hasSender() {
    return sender_ != null;
  }
  /**
   * <pre>
   * The sender, if any.
   * </pre>
   *
   * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
   */
  public com.heroiclabs.nakama.rtapi.UserPresence getSender() {
    return sender_ == null ? com.heroiclabs.nakama.rtapi.UserPresence.getDefaultInstance() : sender_;
  }
  /**
   * <pre>
   * The sender, if any.
   * </pre>
   *
   * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
   */
  private void setSender(com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (value == null) {
      throw new NullPointerException();
    }
    sender_ = value;
    
    }
  /**
   * <pre>
   * The sender, if any.
   * </pre>
   *
   * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
   */
  private void setSender(
      com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
    sender_ = builderForValue.build();
    
  }
  /**
   * <pre>
   * The sender, if any.
   * </pre>
   *
   * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
   */
  private void mergeSender(com.heroiclabs.nakama.rtapi.UserPresence value) {
    if (sender_ != null &&
        sender_ != com.heroiclabs.nakama.rtapi.UserPresence.getDefaultInstance()) {
      sender_ =
        com.heroiclabs.nakama.rtapi.UserPresence.newBuilder(sender_).mergeFrom(value).buildPartial();
    } else {
      sender_ = value;
    }
    
  }
  /**
   * <pre>
   * The sender, if any.
   * </pre>
   *
   * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
   */
  private void clearSender() {  sender_ = null;
    
  }

  public static final int DATA_FIELD_NUMBER = 3;
  private java.lang.String data_;
  /**
   * <pre>
   * Arbitrary contents of the data message.
   * </pre>
   *
   * <code>optional string data = 3;</code>
   */
  public java.lang.String getData() {
    return data_;
  }
  /**
   * <pre>
   * Arbitrary contents of the data message.
   * </pre>
   *
   * <code>optional string data = 3;</code>
   */
  public com.google.protobuf.ByteString
      getDataBytes() {
    return com.google.protobuf.ByteString.copyFromUtf8(data_);
  }
  /**
   * <pre>
   * Arbitrary contents of the data message.
   * </pre>
   *
   * <code>optional string data = 3;</code>
   */
  private void setData(
      java.lang.String value) {
    if (value == null) {
    throw new NullPointerException();
  }
  
    data_ = value;
  }
  /**
   * <pre>
   * Arbitrary contents of the data message.
   * </pre>
   *
   * <code>optional string data = 3;</code>
   */
  private void clearData() {
    
    data_ = getDefaultInstance().getData();
  }
  /**
   * <pre>
   * Arbitrary contents of the data message.
   * </pre>
   *
   * <code>optional string data = 3;</code>
   */
  private void setDataBytes(
      com.google.protobuf.ByteString value) {
    if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
    
    data_ = value.toStringUtf8();
  }

  public static final int RELIABLE_FIELD_NUMBER = 4;
  private boolean reliable_;
  /**
   * <pre>
   * True if this data was delivered reliably, false otherwise.
   * </pre>
   *
   * <code>optional bool reliable = 4;</code>
   */
  public boolean getReliable() {
    return reliable_;
  }
  /**
   * <pre>
   * True if this data was delivered reliably, false otherwise.
   * </pre>
   *
   * <code>optional bool reliable = 4;</code>
   */
  private void setReliable(boolean value) {
    
    reliable_ = value;
  }
  /**
   * <pre>
   * True if this data was delivered reliably, false otherwise.
   * </pre>
   *
   * <code>optional bool reliable = 4;</code>
   */
  private void clearReliable() {
    
    reliable_ = false;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (stream_ != null) {
      output.writeMessage(1, getStream());
    }
    if (sender_ != null) {
      output.writeMessage(2, getSender());
    }
    if (!data_.isEmpty()) {
      output.writeString(3, getData());
    }
    if (reliable_ != false) {
      output.writeBool(4, reliable_);
    }
  }

  public int getSerializedSize() {
    int size = memoizedSerializedSize;
    if (size != -1) return size;

    size = 0;
    if (stream_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getStream());
    }
    if (sender_ != null) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getSender());
    }
    if (!data_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeStringSize(3, getData());
    }
    if (reliable_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(4, reliable_);
    }
    memoizedSerializedSize = size;
    return size;
  }

  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, data, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input);
  }
  public static com.heroiclabs.nakama.rtapi.StreamData parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageLite.parseFrom(
        DEFAULT_INSTANCE, input, extensionRegistry);
  }

  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.heroiclabs.nakama.rtapi.StreamData prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }

  /**
   * <pre>
   * A data message delivered over a stream.
   * </pre>
   *
   * Protobuf type {@code nakama.realtime.StreamData}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageLite.Builder<
        com.heroiclabs.nakama.rtapi.StreamData, Builder> implements
      // @@protoc_insertion_point(builder_implements:nakama.realtime.StreamData)
      com.heroiclabs.nakama.rtapi.StreamDataOrBuilder {
    // Construct using com.heroiclabs.nakama.rtapi.StreamData.newBuilder()
    private Builder() {
      super(DEFAULT_INSTANCE);
    }


    /**
     * <pre>
     * The stream this data message relates to.
     * </pre>
     *
     * <code>optional .nakama.realtime.Stream stream = 1;</code>
     */
    public boolean hasStream() {
      return instance.hasStream();
    }
    /**
     * <pre>
     * The stream this data message relates to.
     * </pre>
     *
     * <code>optional .nakama.realtime.Stream stream = 1;</code>
     */
    public com.heroiclabs.nakama.rtapi.Stream getStream() {
      return instance.getStream();
    }
    /**
     * <pre>
     * The stream this data message relates to.
     * </pre>
     *
     * <code>optional .nakama.realtime.Stream stream = 1;</code>
     */
    public Builder setStream(com.heroiclabs.nakama.rtapi.Stream value) {
      copyOnWrite();
      instance.setStream(value);
      return this;
      }
    /**
     * <pre>
     * The stream this data message relates to.
     * </pre>
     *
     * <code>optional .nakama.realtime.Stream stream = 1;</code>
     */
    public Builder setStream(
        com.heroiclabs.nakama.rtapi.Stream.Builder builderForValue) {
      copyOnWrite();
      instance.setStream(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The stream this data message relates to.
     * </pre>
     *
     * <code>optional .nakama.realtime.Stream stream = 1;</code>
     */
    public Builder mergeStream(com.heroiclabs.nakama.rtapi.Stream value) {
      copyOnWrite();
      instance.mergeStream(value);
      return this;
    }
    /**
     * <pre>
     * The stream this data message relates to.
     * </pre>
     *
     * <code>optional .nakama.realtime.Stream stream = 1;</code>
     */
    public Builder clearStream() {  copyOnWrite();
      instance.clearStream();
      return this;
    }

    /**
     * <pre>
     * The sender, if any.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
     */
    public boolean hasSender() {
      return instance.hasSender();
    }
    /**
     * <pre>
     * The sender, if any.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
     */
    public com.heroiclabs.nakama.rtapi.UserPresence getSender() {
      return instance.getSender();
    }
    /**
     * <pre>
     * The sender, if any.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
     */
    public Builder setSender(com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.setSender(value);
      return this;
      }
    /**
     * <pre>
     * The sender, if any.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
     */
    public Builder setSender(
        com.heroiclabs.nakama.rtapi.UserPresence.Builder builderForValue) {
      copyOnWrite();
      instance.setSender(builderForValue);
      return this;
    }
    /**
     * <pre>
     * The sender, if any.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
     */
    public Builder mergeSender(com.heroiclabs.nakama.rtapi.UserPresence value) {
      copyOnWrite();
      instance.mergeSender(value);
      return this;
    }
    /**
     * <pre>
     * The sender, if any.
     * </pre>
     *
     * <code>optional .nakama.realtime.UserPresence sender = 2;</code>
     */
    public Builder clearSender() {  copyOnWrite();
      instance.clearSender();
      return this;
    }

    /**
     * <pre>
     * Arbitrary contents of the data message.
     * </pre>
     *
     * <code>optional string data = 3;</code>
     */
    public java.lang.String getData() {
      return instance.getData();
    }
    /**
     * <pre>
     * Arbitrary contents of the data message.
     * </pre>
     *
     * <code>optional string data = 3;</code>
     */
    public com.google.protobuf.ByteString
        getDataBytes() {
      return instance.getDataBytes();
    }
    /**
     * <pre>
     * Arbitrary contents of the data message.
     * </pre>
     *
     * <code>optional string data = 3;</code>
     */
    public Builder setData(
        java.lang.String value) {
      copyOnWrite();
      instance.setData(value);
      return this;
    }
    /**
     * <pre>
     * Arbitrary contents of the data message.
     * </pre>
     *
     * <code>optional string data = 3;</code>
     */
    public Builder clearData() {
      copyOnWrite();
      instance.clearData();
      return this;
    }
    /**
     * <pre>
     * Arbitrary contents of the data message.
     * </pre>
     *
     * <code>optional string data = 3;</code>
     */
    public Builder setDataBytes(
        com.google.protobuf.ByteString value) {
      copyOnWrite();
      instance.setDataBytes(value);
      return this;
    }

    /**
     * <pre>
     * True if this data was delivered reliably, false otherwise.
     * </pre>
     *
     * <code>optional bool reliable = 4;</code>
     */
    public boolean getReliable() {
      return instance.getReliable();
    }
    /**
     * <pre>
     * True if this data was delivered reliably, false otherwise.
     * </pre>
     *
     * <code>optional bool reliable = 4;</code>
     */
    public Builder setReliable(boolean value) {
      copyOnWrite();
      instance.setReliable(value);
      return this;
    }
    /**
     * <pre>
     * True if this data was delivered reliably, false otherwise.
     * </pre>
     *
     * <code>optional bool reliable = 4;</code>
     */
    public Builder clearReliable() {
      copyOnWrite();
      instance.clearReliable();
      return this;
    }

    // @@protoc_insertion_point(builder_scope:nakama.realtime.StreamData)
  }
  protected final Object dynamicMethod(
      com.google.protobuf.GeneratedMessageLite.MethodToInvoke method,
      Object arg0, Object arg1) {
    switch (method) {
      case NEW_MUTABLE_INSTANCE: {
        return new com.heroiclabs.nakama.rtapi.StreamData();
      }
      case IS_INITIALIZED: {
        return DEFAULT_INSTANCE;
      }
      case MAKE_IMMUTABLE: {
        return null;
      }
      case NEW_BUILDER: {
        return new Builder();
      }
      case VISIT: {
        Visitor visitor = (Visitor) arg0;
        com.heroiclabs.nakama.rtapi.StreamData other = (com.heroiclabs.nakama.rtapi.StreamData) arg1;
        stream_ = visitor.visitMessage(stream_, other.stream_);
        sender_ = visitor.visitMessage(sender_, other.sender_);
        data_ = visitor.visitString(!data_.isEmpty(), data_,
            !other.data_.isEmpty(), other.data_);
        reliable_ = visitor.visitBoolean(reliable_ != false, reliable_,
            other.reliable_ != false, other.reliable_);
        if (visitor == com.google.protobuf.GeneratedMessageLite.MergeFromVisitor
            .INSTANCE) {
        }
        return this;
      }
      case MERGE_FROM_STREAM: {
        com.google.protobuf.CodedInputStream input =
            (com.google.protobuf.CodedInputStream) arg0;
        com.google.protobuf.ExtensionRegistryLite extensionRegistry =
            (com.google.protobuf.ExtensionRegistryLite) arg1;
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!input.skipField(tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                com.heroiclabs.nakama.rtapi.Stream.Builder subBuilder = null;
                if (stream_ != null) {
                  subBuilder = stream_.toBuilder();
                }
                stream_ = input.readMessage(com.heroiclabs.nakama.rtapi.Stream.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(stream_);
                  stream_ = subBuilder.buildPartial();
                }

                break;
              }
              case 18: {
                com.heroiclabs.nakama.rtapi.UserPresence.Builder subBuilder = null;
                if (sender_ != null) {
                  subBuilder = sender_.toBuilder();
                }
                sender_ = input.readMessage(com.heroiclabs.nakama.rtapi.UserPresence.parser(), extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(sender_);
                  sender_ = subBuilder.buildPartial();
                }

                break;
              }
              case 26: {
                String s = input.readStringRequireUtf8();

                data_ = s;
                break;
              }
              case 32: {

                reliable_ = input.readBool();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw new RuntimeException(e.setUnfinishedMessage(this));
        } catch (java.io.IOException e) {
          throw new RuntimeException(
              new com.google.protobuf.InvalidProtocolBufferException(
                  e.getMessage()).setUnfinishedMessage(this));
        } finally {
        }
      }
      case GET_DEFAULT_INSTANCE: {
        return DEFAULT_INSTANCE;
      }
      case GET_PARSER: {
        if (PARSER == null) {    synchronized (com.heroiclabs.nakama.rtapi.StreamData.class) {
            if (PARSER == null) {
              PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
            }
          }
        }
        return PARSER;
      }
    }
    throw new UnsupportedOperationException();
  }


  // @@protoc_insertion_point(class_scope:nakama.realtime.StreamData)
  private static final com.heroiclabs.nakama.rtapi.StreamData DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new StreamData();
    DEFAULT_INSTANCE.makeImmutable();
  }

  public static com.heroiclabs.nakama.rtapi.StreamData getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static volatile com.google.protobuf.Parser<StreamData> PARSER;

  public static com.google.protobuf.Parser<StreamData> parser() {
    return DEFAULT_INSTANCE.getParserForType();
  }
}

